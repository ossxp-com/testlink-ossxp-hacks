From: Jiang <jiangxin@ossxp.com>
Subject: [PATCH] t/php5_thirdparty_xmlrpc

Upgrade phpxmlrpc

Signed-off-by: Jiang <jiangxin@ossxp.com>

---
 third_party/phpxmlrpc/Changelog               |  400 +++++++++++++----
 third_party/phpxmlrpc/NEWS                    |   56 +++
 third_party/phpxmlrpc/README                  |    2 -
 third_party/phpxmlrpc/lib/xmlrpc.inc          |  596 +++++++++++++++----------
 third_party/phpxmlrpc/lib/xmlrpc_wrappers.inc |  177 +++++++-
 third_party/phpxmlrpc/lib/xmlrpcs.inc         |  242 +++++++----
 6 files changed, 1041 insertions(+), 432 deletions(-)

diff --git a/third_party/phpxmlrpc/Changelog b/third_party/phpxmlrpc/Changelog
index 7f4ec0e..d2cad21 100644
--- a/third_party/phpxmlrpc/Changelog
+++ b/third_party/phpxmlrpc/Changelog
@@ -1,4 +1,212 @@
-2007-02-25 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2009-09-05 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpcs.inc, xmlrpcs.inc: remove code that was left for compatibility
+	with php 4; use __METHOD__ constant for error messages instead of hardcoded
+	values
+
+	* xmlrpcs.inc: catch exceptions thrown during execution of invoked methods;
+	check for $_SERVER having been disabled via php.ini and log an error if so
+
+	* server.php, testsuite.php: add a new test and server method for exception
+	catching in the server
+
+	* xmlrpc.inc: added new method SetUserAgent to client to allow having different
+	user-agent http headers
+
+	* tagged and released as 3.0.0 beta
+
+2009-08-05 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc_wrappers.inc: improve compatibility with php 5.0 when registering
+	class/object methods
+
+2009-08-02 - G. Giunta (giunta.gaetano@gmail.com) thanks Laurens
+
+	* xmlrpcs.inc: add a new member var in server class to allow fine-tuning
+	of the encoding of returned values when the server is in 'phpvals' mode;
+	allow servers in 'xmlrpcvals' mode to also register plain php functions by
+	defining them in the dispatch map with an added option:
+	'parameters_type' => 'phpvals' (feature request #2806628)
+
+	* xmlrpc.inc: added new method xmrlpc_client::SetCurlOptions($array) to
+	allow extra flexibility in tweaking http config, such as explicitly
+	binding to an ip address (feature request #2787468); fix bad encoding if
+	same object is encoded twice using php_xmlrpc_encode; removed some by-ref
+	assignments and declarations
+
+2009-07-31 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc: add support for dateTime objects in both in php_xmlrpc_encode
+	and as parameter for constructor of xmlrpcvals; add support for timestamps
+	as parameter for constructor of xmlrpcvals; add option 'dates_as_objects' to
+	php_xmlrpc_decode to return dateTime objects for xmlrpc datetimes
+
+	* benchmark.php, xmlrpc_wrappers.inc: remove usage of split(), deprecated in
+	php 5.3
+
+	* benchmark.php: fixed url of server page used for testing; improved
+	verification of correspondence of test results; added more variants for
+	http options comparison
+
+	* verify_compat.php: check for php version 5 for client side too
+
+	* makefile: remove from build the compat directory
+
+2009-07-26 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* server.php: remove usage of ereg*(), deprecated in php 5.3
+
+2009-07-16 - G. Giunta (giunta.gaetano@gmail.com) thanks Jean-Jacques Sarton
+
+	* xmlrpc.inc: add support for the <ex:nil/> from the apache library, both
+	in input and output (feature request #...)
+
+	* xmlrpc.inc, testsuite.php: remove usage of split(), deprecated in php 5.3
+
+	* testsuite.php: flush better results with output_buffering on
+
+	* server: php: avoid one warning about static function calls
+
+2009-07-02 - G. Giunta (giunta.gaetano@gmail.com) thanks Heiko Stuebner
+
+	* xmlrpc.inc: fix: when checking the parameters against the signatures xmlrpc
+	checks for "array" but PHP returns "Array" resulting in a not matches signature
+
+2009-05-07 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* replace all usage of '= & new' with '= new', as this is deprecated in php 5
+	and has been shown to cause problems too
+
+2009-05-06 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* create php4 branch, rename trunk to 3.0.0beta - it will be the php5-only version
+
+	* xmlrpc.inc: removed test for php version and inclusion of compat patches for really
+	really old versions of php 4
+
+2009-03-16 - G. Giunta (giunta.gaetano@gmail.com) thanks Tommaso Trani
+
+	* move from CVS to SVN on sf.net; file layout now is the same as in packaged lib
+
+	* xmlrpc.inc: fix php warning when receiving 'false' in a bool value
+
+	* Makefile, doc/Makefile: alter to follow new file layout
+
+	* tagged and released as 2.2.2
+
+2009-02-03 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* debugger/action.php: improve code robustness when parsing system.listmethods
+	and system.describemethods call
+
+	* xmlrpc.inc: format floating point values using the correct decimal separator
+	even when php locale is set to one that uses comma (bug #2517579);
+	use feof() to test if socket connections are to be closed instead of the
+	number of bytes read (bug #2556209)
+
+2008-10-29 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpcs.inc: allow add_to_map server method to add docs for single params, too
+
+2008-09-20 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc_wrappers.inc: added the possibility to wrap for exposure as xmlrpc
+	methods plain php class methods, object methods and even whole classes
+
+	* testsuite.php, server.php: added test cases for the new code
+
+2008-09-07 - G. Giunta (giunta.gaetano@gmail.com) thanks Bruno Zanetti Melotti
+
+	* xmlrpc.inc: be more tolerant in detection of charset in http headers (fix for bug #2058158)
+
+2008-04-05 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc: fix encoding of UTF8 chars outside of the BMP
+
+	* xmlrpcs.inc: fix detection of zlib.output_compression (thanks xbert)
+
+2008-03-06 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* tagged and released as 2.2.1
+
+	* Makefile: improve usage on windows xp despite cmd's broken mkdir
+
+2007-10-26 - G. Giunta (giunta.gaetano@gmail.com) thanks sajo_raftman
+
+	* xmlrpc.inc: remove one warning in xmlrpc_client creator
+
+2007-10-26 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc: improve support for windows cp1252 character set (still
+	commented in the code)
+
+2007-09-05 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc, xmlrps.inc: do not try to set invalid charsets as output for
+	xml parser, even if user set them up for internal_encoding (helps encoding
+	to exotic charsets, while decoding to UTF8)
+
+2007-09-05 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc: fix parsing of '1e+1' as valid float
+
+2007-09-01 - G. Giunta (giunta.gaetano@gmail.com), thanks Frederic Lecointre
+
+	* xmlrpcs.inc: allow errorlevel 3 to work when prev. error handler was a static method
+
+	* testsuite.php: fix test on setCookie()
+
+2007-08-31 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc: minor fix in cookie parsing
+
+2007-07-31 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc: Fix usage of client::setcookie() for multiple cookies in non-ssl mode
+
+2007-07-26 - G. Giunta (giunta.gaetano@gmail.com) thanks Mark Olive
+
+	* xmlrpc.inc: Fix for bug # 1756274 (usage of cookies in ssl mode)
+
+2007-04-28 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc: give more detailed curl information when DEBUG = 2; fix handling
+	of case where curl w. keepalive is used and one connection of many fails
+
+	* testsuite improvements: add one testcase; give feedbcak while tests are
+	running
+
+2007-04-01 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* doc/makefile, doc/custom.fo.xsl: improve pdf rendering of php source code
+
+	* makefile: recover version number from source instead of having it hardcoded
+
+2007-03-10 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* doc/makefile, doc/convert.php, doc/*.xsl: created customizations xslt to
+	produce a documentation more in line with the php manual, esp. with regards
+	to functions synopsis; added jellyfish book cover as local resource and a
+	screenshot of the debugger too; various updates to the manual source; added
+	a php script to highlight examples inside html docs
+
+2007-03-09 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* debugger/action.php: css tweak for IE
+
+	* added phpunit license file in the phpunit directory
+
+	* added link to license (on sf.net site) to many files
+
+2007-03-04 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* Makefile, doc/makefile: assorted improvements
+
+2007-03-03 - G. Giunta (giunta.gaetano@gmail.com)
+
+	* xmlrpc.inc: micro-optimization in declaration of global vars xmlrpcerr, xmlrpcstr
+
+2007-02-25 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* removed a couple of warnings emitted in testsuite.php
 
@@ -10,43 +218,43 @@
 
 	* tagged and released as 2.2
 
-2007-02-22 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2007-02-22 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* debugger: workaround for case of magic_quotes_gpc being set (properly
 	unescape user input); fix case of user not setting msg id in jsonrpc case
 	when executing a remote method; allow strings, false, true and null as msg id
 
-2007-02-13 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2007-02-13 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* testsuite.php: added one test for automatic encoding/decoding case
 
-2007-02-05 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2007-02-05 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: slightly faster encoding of UTF8 data to ascii
 
-2007-01-11 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2007-01-11 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: when calling client::multicall() with an unspecified http version,
 	use the client default rather than the fixed 'http 1.0'
 
-2006-09-17 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-09-17 Gaetano Giunta <giunta.gaetano@gmail.com>
 
-	* xmlrpc.inc, xmlrpcs.inc, testsuite.php: added support for </NIL> and
+	* xmlrpc.inc, xmlrpcs.inc, testsuite.php: added support for <NIL/> and
 	system.getCapabilities, and one more testcase to go with it
 
-2006-09-05 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-09-05 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fix support for https through proxies; client parses debug
 	messages sent by client even for compressed responses;
 
 	* testsuite.php, parse_args.php: added 3 test cases for proxy connections
 
-2006-09-01 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-09-01 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	xmlrpc_wrappers.inc: add two more options in wrap_xmlrpc_method and fix
 	typo to allow obj encoding
 
-2006-08-28 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-08-28 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc_wrappers.inc: more options added to wrap_php_function and
 	wrap_xmlrpc_method
@@ -57,14 +265,14 @@
 
 	* tagged and released as 2.1
 
-2006-08-25 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-08-25 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: stricter parsing of incoming messages: detect two DATA elements
 	inside an ARRAY, a STRUCT or SCALAR inside an already filled VALUE
 
 	* testsuite.php: added two testcases to check for the above cases
 
-2006-08-24 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-08-24 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: more code optimization in xmlrpcval::serialize() and
 	php_xmlrpc_encode(); fixed bug where struct elements with non-ascii chars
@@ -72,7 +280,7 @@
 
 	* testsuite.php: added a testcase for the new bug
 
-2006-08-23 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-08-23 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* remove old code left in comments across many files; many more javadoc
 	comments added
@@ -85,12 +293,12 @@
 
 	* benchmark.php: basic support for xdebug 2 profiling
 
-2006-08-22 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-08-22 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: addscalar() and addstruct() where not returning 1 when adding
 	data to an already formed value
 
-2006-08-21 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-08-21 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc, xmlrpc.inc: added support for emulating the xmlrpc-extension
 	API (the full emulation layer is part of the extras package);
@@ -111,11 +319,11 @@
 
 	* added cvs Id tag to files that missed it; speling fixes; updated NEWS files
 
-2006-08-07 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-08-07 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* assorted fixes to make the suite more compatible with php 4.0.5 and 5.x
 
-2006-07-02 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-07-02 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc_warppers.inc: added new function to wrap entire remote server into
 	a local php class; changed default calling synopsis of wrap_remote_method,
@@ -123,14 +331,14 @@
 
 	* updated makefile, debugger/action.php in accord with the above
 
-2006-06-30 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-06-30 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* added to debugger capability to generate json-rpc code stubs
 
 	* added to debugger capability to load and launch self correctly if
 	controller.php is called directly from outside processes (single url access)
 
-2006-06-26 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-06-26 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* moved wrap_php_functions and wrap_xmlrpc_method into a file of their own.
 	This will let us add further stub functionality without the base lib growing too much.
@@ -142,7 +350,7 @@
 	* added to debugger an option to produce for the user the generated php code
 	for wrapping a call to a remote method into a php function
 
-2006-06-22 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-06-22 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: added description of parameters for system.xxx methods (useful with
 	html-self-documenting servers);
@@ -150,34 +358,34 @@
 
 	* xmlrpc.inc: save full response payload into xmlrpcresp obj for better debugging
 
-2006-06-15 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-06-15 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* verify_compat.php: more tests
 
-2006-06-09 Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-06-09 Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: fixed sending of compressed responses when output compression
 	is already enabled in php.ini
 
 	* verify_compat.php: split tests between server and client cases
 
-2006-05-29  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-05-29  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* added new file: verify_compat.php, to help troubleshooting platform
 	support for the library; added it to makefile, too
 
-2006-05-24  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-05-24  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: removed residual usage of regexp in favour of  pregexps; fixed
 	a bug in specifying Host http header with non std ports
 
-2006-05-23  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-05-23  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: improvements to wrap_php_function: let it deal correctly
 	with php functions returning xmlrpcresp objs; make it generate also
 	docs for single parameters (useful for documenting_xmlrpc_server class)
 
-2006-05-22  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-05-22  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc, xmlrpcs.inc: minor performance tuning updates: replaced
 	some explode vs. split, ereg vs. preg, single vs. double quotes
@@ -185,37 +393,37 @@
 	* xmlrpc.inc: fix wrap_xmlrpc_method to NOT rebuild php objects received
 	from the server by default, as it might pose a security risk
 
-2006-04-24  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-04-24  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* minor fixes makefiles. Tagged and released as 2.0 final
 
-2006-04-22  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-04-22  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* debugger/*: added option to set cainfo; improve web layout
 
-	* xmlrpc.inc: set sslverifypeer tp TRUE instaed of 1 by default
+	* xmlrpc.inc: set sslverifypeer to TRUE instaed of 1 by default
 
 	* doc/php_xmlrpc.xml: documentation updates
 
-2006-04-21  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-04-21  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: added option to set ca certs dir instead of single cert
 	(used to validate server in https connetions)
 
-2006-04-18  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-04-18  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fixed bug in xmlrpcval::structmemexists()
 
 	* testsuite.php: added test case for xmlrpcval::structmemexists()
 
-2006-04-03  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-04-03  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: add support for Digest and NTLM authentication, both to server
 	and to proxies (note: must use CURL for this to work)
 
 	* debugger/*: add support for Digest/NTLM auth to remote servers
 
-2006-03-19  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-03-19  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fix a bug parsing of 'true' bool values;
 	added a new method to the client class: SetCaCertificate;
@@ -232,11 +440,11 @@
 
 	* NEWS: update info for impending release
 
-2006-03-23  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-03-23  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* added a new demo file: simple_call.php
 
-2006-02-20  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-02-20  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: more error checking and logging with regard to user-coded
 	method handler functions not being well behaved;
@@ -254,7 +462,7 @@
 	definition of $GLOBALS['xmlrpcNull'] for extensibility, e.g. json or
 	extensions to the xmlrpc spec
 
-2006-02-05  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-02-05  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fix bug in wrap_xmlrpc_method if client passed to function has
 	return_type=phpvals
@@ -264,11 +472,11 @@
 	* added 2 demo files: proxy.php (implementing an xmlrpc proxy server) and
 	wrap.php (showing usage of wrap_method_call)
 
-2006-02-04  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-02-04  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fix bug in multicall in case of no fallback and server error
 
-2006-01-30  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-01-30  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fix recursive serialization of xmlrpcvals loosing UTF8 charset;
 	correctly set type field of xmlrpcvals returned by send() calls
@@ -279,13 +487,13 @@
 	* minor change in xmlrpcresp internals, to ease subclassing (store payload
 	in an internal var on serialize(), same as xmlrpcclient does)
 
-2006-01-22  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-01-22  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* benchmark.php: do not run http 1.1 tests if CURL notfound
 
 	* Released as 2.0 Rc3
 
-2006-01-19  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-01-19  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: make xmlrpc_client::setDebug() accept int values instead of
 	boolean. At level 2, the request payload is printed to screen before being
@@ -301,25 +509,25 @@
 
 	* testsuite.php: added test for fix in xmlrpc.inc
 
-2006-01-17  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-01-17  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.php: minor fix: do not raise a PHP warning when std server is
 	called via GET (global HTTP_RAW_POST_DATA undefined). Some might have called
 	it a security breach (path disclosure)...
 
-2006-01-15  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-01-15  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* testsuite.php: minor fix to expected date format in http cookie hedaer
 	to cope with PHP 5.1.2
 
-2006-01-05  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2006-01-05  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: merge code from the 'extras' subclass that allows server
 	to register plain php functions in dispatch map instead of functions
 	accepting a single xmlrpcmgs obj parameter.
 	One step closer to the kitchen sink!!!
 
-2005-12-31  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-12-31  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: let the server accept 'class::method' syntax in the dispatch
 	map
@@ -327,7 +535,7 @@
 	* testsuite.php, server.php: added new tests for the recent charset encoding
 	capabilities
 
-2005-12-24  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-12-24  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: correctly serialize() string xmlrpcvals that have been
 	created out of non-string php variables, when internal encoding is UTF8;
@@ -340,7 +548,7 @@
 
 	* xmlrpcs.inc: advances in system.multicall with plain php values
 
-2005-12-17  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-12-17  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: let the functions implementing the system.* methods work
 	fine when called with plain php values as parameters instead of xmlrpcmsg
@@ -353,7 +561,7 @@
 
 	* server.php: cosmetic fixes
 
-2005-12-09  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-12-09  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: remove one warning emitted when received xml contains an
 	unknown tag; remove warnings emitted when custom error handler is set
@@ -370,7 +578,7 @@
 	* testsuite.php: modified the string test, to see if the server can echo
 	back to the client the received data without breaking the response's xml
 
-2005-12-05  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-12-05  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc, xmlrpcs.inc: let server and client objects decide if they
 	want to use some charset encoding other than US-ASCII for serialized data:
@@ -379,27 +587,27 @@
 	refactored server method service() and parseRequest(), implementing a
 	new parserequestHeaders() method to explicitly deal with HTTP
 
-2005-12-01  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-12-01  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* moved the jsonrpc implementation and the new wsdl stuff to a separate
 	CVS module; updated the makefile to reflect it
 
-2005-11-24  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-11-24  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* modified php_xmlrpc_decode() to work on xmlrpcmessages too, besides
 	xmlrpcvals. To achieve this, added a new method: xmlrpcmsg::kindOf()
 
-2005-11-22  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-11-22  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* released as 2.0 RC2
 
-2005-11-21  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-11-21  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fix warnings about references for PHP 4.1.X
 
 	* Whitespace cleanup on all the lib
 
-2005-11-16  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-11-16  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: rewritten xmlrpc_encode_entitites adding two extra parameters
 	that specify input and output charset encodings. This corrects the bug that
@@ -416,7 +624,7 @@
 
 	* jsonrpc.inc: slow progress...
 
-2005-11-10  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-11-10  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fixed the xmlrpc_client send and sendpayloadhttps methods
 	to fix errors in calling https servers;
@@ -427,7 +635,7 @@
 	* xmlrpcs.inc: separate generation of content-type http header and xml prologue
 	from the service() method, to ease subclassing
 
-2005-11-03  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-11-03  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: moved the 'text/xml' mimetype string as class var of the xmlrpcmsg
 	object instead of having it cabled into xmlrpc_client->send(): this allows to
@@ -437,14 +645,14 @@
 	 designed to implement a json-rpc client and server, taking advantage of the
 	 existing xml-rpc infrastructure
 
-2005-10-28  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-10-28  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: changed constructor method for xmlrpcresp, making it smarter in
 	case user does not declare the type of value it is passing to it;
 	minor changes in serialization of xmlrpcresp with error codes, so that it
 	utputs LF instead of CRLF on windows boxes after an FTP transfer of the code, too
 
-2005-10-26  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-10-26  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: added a new var of class xmlrpc_client, indicating what kind of
 	object will be stored in the value() of xmlrpcresp's gotten from the send()
@@ -466,7 +674,7 @@
 	* testsuite.php: added a new testcase for the modifications to multicall():
 	now we test the case where xmlrpc_client returns php values, too
 
-2005-10-24  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-10-24  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fixed guess_encoding() to always return uppercase chars
 
@@ -481,18 +689,18 @@
 	* testsuite.php: added a couple of new test cases; fixed one warning
 	emitted in php 5 E_STRICT mode
 
-2005-10-20  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-10-20  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: modify 3d param of ParseResponse(), allowing the function to
 	return the raw xml received as value of the xmlrpcresponse object.
 	This allows eg. to have epi-xmlrpc decode the xml for faster execution.
 
-2005-10-09  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-10-09  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fixed error that prevented usage of HTTPS (the client
 	always determined that ssl support was not present)
 
-2005-10-03  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-10-03  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc, xmlrpcs.inc: revert direction of stack growth during xml
 	parsing for faster execution time; add support for detecting charset
@@ -530,7 +738,7 @@
 
 	* Removed: bug_* files
 
-2005-07-14  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-14  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* debugger: added a workaround to disable using the debugger for attacking
 	older versions of the lib
@@ -546,7 +754,7 @@
 	correct wrap_xmlrpc_method to not set http protocol to 1.0 when not asked to;
 	detect curl compiles without SSL
 
-2005-07-14  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-14  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: more auto-fix of xmlrpc_client path: '' -> '/';
 	change to the method used for detecting failed evals (php 4.0.x compatibility);
@@ -559,7 +767,7 @@
 	number of failed tests;
 	flush html page title to screen before starting tests;
 
-2005-07-13  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-13  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: let xmlrpcmsg creator be forgiving of target paths that miss the
 	starting '/' char;
@@ -569,7 +777,7 @@
 	* testsuite.php: added ability to be run from cli: (really dumb) separation of
 	html and plain text outputs + parsing of argv parameters
 
-2005-07-12  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-12  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: compatibility fixes with PHP versions 4.0.x (and remove some for
 	PHP 3)
@@ -581,7 +789,7 @@
 	localhost fail;
 	correctly detect a localhost port different from 80 for running tests against
 
-2005-07-11  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-11  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: preliminary building of method signature and docs in
 	wrap_php_function;
@@ -592,7 +800,7 @@
 	* added compat subdir with extra code, taken form PEAR package Compat, to let
 	the lib run fine with php 4 versions < 4.1
 
-2005-07-10  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-10  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: some nazi whitespace corrections;
 	declared global $xmlrpcBoolean too (was the only one missing);
@@ -621,7 +829,7 @@
 	added a hint to enable debug if some test goes wrong;
 	renamed https test for better clarity
 
-2005-07-07  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-07  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: added function to be used for 'guestimating' charset encoding of
 	received xml (not activated yet)
@@ -632,7 +840,7 @@
 	* testsuite.php: added suite of tests for compressed responses; test CURL
 	(http1.1) with all possible compression combinations too
 
-2005-07-06  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-06  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: Enable setting usage of keepalives on/off (for CURL cases);
 	implement compression of xmlrpc requests; enable new syntax of xmlrpclient
@@ -651,7 +859,7 @@
 	run all localhost tests in a row using keepalives, to test keepalive
 	functionality
 
-2005-07-05  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-07-05  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: let CURL pass back to caller function the complete PHP headers
 	as it did before: it enables better logging / debugging of communication;
@@ -672,11 +880,11 @@
 	switched to PEAR PHPUnit classes;
 	divided test for client ability to do multicall() into 2 separate tests
 
-2005-06-30  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-06-30  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	tagged and released version 1.1.1, backporting security fixes from HEAD
 
-2005-06-28  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-06-28  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: fix changes introuced yesterday in a rush;
 	do not list system.* methods for a server that has them explicitly disabled
@@ -686,7 +894,7 @@
 	* testsuite.php: added a test case for zero parameters method calls;
 	added two test cases for recently found code injection vulnerabilities
 
-2005-06-27  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-06-27  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: (tentative) fix for security problem reported by
 	security@gulftech.org: we were not properly php-escaping xml received for
@@ -701,7 +909,7 @@
 	generated errors without echoing it to screen but take note of the error and
 	propagate to user code
 
-2005-06-24  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-06-24  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fixed php_xmlrpc_encode detection of php arrays (again!);
 	removed from wrap_php_function the part about setting a custom error handler
@@ -714,7 +922,7 @@
 
 	* testsuite.php: Added new testcases for recently implemented stuff
 
-2005-06-23  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-06-23  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: added new method: xmlrpcval->structmemexists, to check for
 	presence of a wanted struct member without having to loop through all members;
@@ -746,7 +954,7 @@
 	* phpunit.php: Do not consider as failures PHP 5 E_STRICT errors (arbitrary
 	choice, but lib is targeted at PHP 4)
 
-2005-06-22  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-06-22  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: removed lottsa old code that had been left in commented
 
@@ -769,7 +977,7 @@
 
 	* debugger/*: added initial revision of a 'universal xmlrpc debugger'
 
-2005-06-20  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-06-20  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: replace usage of 'echo' with error_log when errors arise
 	in manipulation of xmlrpcval objects
@@ -785,7 +993,7 @@
 	* xmlrpcs.inc: Added member allow_system_funcs to server: controls whether the
 	server accepts or not calls to system.* functions
 
-2005-05-10  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-05-10  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fix regression in php_xmlrpc_encode when encoding php hashes;
 	fix decompression of gzip/deflated xmlrpc responses;
@@ -800,7 +1008,7 @@
 	to do so will raise a PHP error, and if headers have been sent something has
 	gone wrong already (shall we send a meaningful error response instead?)
 
-2005-05-08  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-05-08  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc, xmlrpcs.inc: reverted to usage of '=& new' for better
 	performance on (some) php4 installs.
@@ -843,11 +1051,11 @@
 
 	* xmlrpc.inc: bumped version number to '2.0 beta'
 
-2005-05-08  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-05-08  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* release of version 1.1
 
-2005-04-24  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-04-24  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: removed charset declaration from xml prologue of responses,
 	since we are now escaping all non-ascii chars in an encoding-independent way
@@ -861,7 +1069,7 @@
 
 	* Makefile: updated to reflect new xml doc source, modified filelist
 
-2005-04-17  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-04-17  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* client.php, agesort.php, introspect.php, introspect_demo.php,
 	which.php, test.pl, test.py: use as default target the server.php page hosted
@@ -873,7 +1081,7 @@
 
 	code formatting and comments
 
-2005-04-03  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-04-03  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: make use of global var $xmlrpcName in building User_Agent HTTP
 	header (in conjunction with $xmlrpcVersion)
@@ -890,7 +1098,7 @@
 	* testsuite.php: better detection of local webserver hostname for running tests
 	against (if the user did not supply a webserver name)
 
-2005-03-21  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-03-21  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: revert to a PHP3 compatible script (change '=& new' to '= new')
 
@@ -908,7 +1116,7 @@
 	* phpunit.php: rename Exception class to _Exception if the script is run with
 	PHP 5 (exception is a reserverd word)
 
-2005-03-19  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-03-19  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fixed bug in new http header parsing code in case there is
 	no correct separator between response headers and body
@@ -927,7 +1135,7 @@
 	* testsuite.php: added a new file-based test to stress the response parsing
 	modifications recently introduced; enabled debugging for file based tests
 
-2005-03-15  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-03-15  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: fixed missing declaration of global vars in xmlrpc_dh,
 	sendpayloadhttps and sendpayloadhttp10
@@ -951,7 +1159,7 @@
 	* testsuite.php: fix name of testAddingTest method, renamed testErrosString
 	into testErrorString and removed useless warning for register_globals=off case
 
-2005-02-27  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-02-27  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: do not echo XML parsing error to screen (it is already dumped
 	into error log)
@@ -959,15 +1167,15 @@
 	* xmlrpc.inc: set hdrs field into response object in case of XML parsing error
 	(uniform behaviour with other responses)
 
-2005-02-26  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-02-26  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: use global var $xmlrpcVersion as number for user agent string
 
-	* xmlrpcs.inc: eliminate server side PHP wanring and give back to caller
+	* xmlrpcs.inc: eliminate server side PHP warning and give back to caller
 	a better error msg in case the called method exists but no signature matches
 	the number of parameters
 
-2005-02-20  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-02-20  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: accept a + sign in front of floats / integers, since the spec
 	clearly mentions it
@@ -985,12 +1193,12 @@
 	docs inside phpunit.php (e.g. no subclass of TestCase should have a name
 	starting with test...)
 
-2005-02-19  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-02-19  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: accept patch 683153 by mah0: if timeout is set, allow all socket
 	operations to timeout at the given time, not only the socket connection
 
-2005-02-13  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-02-13  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: be tolerant to double values received in exponential notation:
 	even though the spec forbids their usage PHP is fine with them
@@ -1027,7 +1235,7 @@
 	ISO-8859-1 is, AFAIK, PHP internal encoding for all installs except
 	mbstring-enabled ones.
 
-2005-02-12  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-02-12  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpcs.inc: use '$var =& new(' construct to assign objects: on older versions
 	of PHP objects are first built then copied over if the ampersand is omitted.
@@ -1045,7 +1253,7 @@
 	* xmlrpc.inc: fix for bug #560303: ints and doubles starting with '0' chars are
 	no more parsed as octal values
 
-2005-01-30  Gaetano Giunta <giunta.gaetano@sea-aeroportimilano.it>
+2005-01-30  Gaetano Giunta <giunta.gaetano@gmail.com>
 
 	* xmlrpc.inc: Modifed last change by Miles: the functions php_xmlrpc_encode
 	and php_xmlrpc_decode are now always defined, regardless of the existence of
@@ -1078,7 +1286,7 @@
 2004-12-27  Miles Lott <milos@groupwhere.org>
 	* xmlrpc.inc: A new constant, XMLRPC_EPI_ENABLED, is defined depending on
 	the existence of the function, xmlrpc_decode.  This function will exist in
-	PHP if the 	extension, XMLRPC-EPI (http://xmlrpc-epi.sourceforge.net), is
+	PHP if the extension, XMLRPC-EPI (http://xmlrpc-epi.sourceforge.net), is
 	loaded.  It defines the functions xmlrpc_encode and xmlrpc_decode, which
 	will conflict with functions of the same name in xmlrpc.inc.  If this
 	extension is loaded, we instead use the names php_xmlrpc_encode and
@@ -1362,4 +1570,4 @@
 	* Fixed bugs in the XML parsing and reworked it
 
 
-$Id: Changelog,v 1.1 2007/11/01 22:04:13 franciscom Exp $
+$Id: ChangeLog,v 1.96 2009/03/16 19:39:11 ggiunta Exp $
diff --git a/third_party/phpxmlrpc/NEWS b/third_party/phpxmlrpc/NEWS
index 3ca0e18..f0f761f 100644
--- a/third_party/phpxmlrpc/NEWS
+++ b/third_party/phpxmlrpc/NEWS
@@ -1,3 +1,59 @@
+XML-RPC for PHP version 3.0.0 beta - 2009/09/05
+
+This is the first release of the library to only support PHP 5.
+Some legacy code has been removed, and support for features such as exceptions
+and dateTime objects introduced.
+
+The "beta" tag is meant to indicate the fact that the refactoring has been more widespread
+than in precedent releases and that more changes are likely to be introduced with time -
+the library is still considered to be production quality.
+
+* improved: removed all usage of php functions deprecated in php 5.3, usage of assign-by-ref when creating new objects etc...
+* improved: add support for the <ex:nil/> tag used by the apache library, both in input and output
+* improved: add support for dateTime objects in both in php_xmlrpc_encode and as parameter for constructor of xmlrpcval
+* improved: add support for timestamps as parameter for constructor of xmlrpcval
+* improved: add option 'dates_as_objects' to php_xmlrpc_decode to return dateTime objects for xmlrpc datetimes
+* improved: add new method SetCurlOptions to xmrlpc_client to allow extra flexibility in tweaking http config, such as explicitly binding to an ip address
+* improved: add new method SetUserAgent to xmrlpc_client to to allow having different user-agent http headers
+* improved: add a new member variable in server class to allow fine-tuning of the encoding of returned values when the server is in 'phpvals' mode
+* improved: allow servers in 'xmlrpcvals' mode to also register plain php functions by defining them in the dispatch map with an added option
+* improved: catch exceptions thrown during execution of php functions exposed as methods by the server
+* fixed: bad encoding if same object is encoded twice using php_xmlrpc_encode
+
+
+XML-RPC for PHP version 2.2.2 - 2009/03/16
+
+This release corrects all bugs that have been reported and sucesfully reproduced since
+version 2.2.1.
+Regardless of the intimidating message about dropping PHP 4 support, it still does
+support that ancient, broken and insecure platform.
+
+* fixed: php warning when receiving 'false' in a bool value
+* fixed: improve robustness of the debugger when parsing weird results from non-compliant servers
+* fixed: format floating point values using the correct decimal separator even when php locale is set to one that uses comma
+* fixed: use feof() to test if socket connections are to be closed instead of the number of bytes read (rare bug when communicating with some servers)
+* fixed: be more tolerant in detection of charset in http headers
+* fixed: fix encoding of UTF8 chars outside of the BMP plane
+* fixed: fix detection of zlib.output_compression
+* improved: allow the add_to_map server method to add docs for single params too
+* improved: added the possibility to wrap for exposure as xmlrpc	methods plain php class methods, object methods and even whole classes
+
+
+XML-RPC for PHP version 2.2.1 - 2008/03/06
+
+This release corrects all bugs that have been reported and sucesfully reproduced.
+It is the last release of the library that will support PHP 4.
+
+* fixed: work aroung bug in php 5.2.2 which broke support of HTTP_RAW_POST_DATA
+* fixed: is_dir parameter of setCaCertificate() method is reversed
+* fixed: a php warning in xmlrpc_client creator method
+* fixed: parsing of '1e+1' as valid float
+* fixed: allow errorlevel 3 to work when prev. error handler was a static method
+* fixed: usage of client::setcookie() for multiple cookies in non-ssl mode
+* improved: support for CP1252 charset is not part or the library but almost possible
+* improved: more info when curl is enabled and debug mode is on
+
+
 XML-RPC for PHP version 2.2 - 2007/02/25
 
 This release corrects a couple of bugs and adds a few minor features.
diff --git a/third_party/phpxmlrpc/README b/third_party/phpxmlrpc/README
index 078dda9..e757a5d 100644
--- a/third_party/phpxmlrpc/README
+++ b/third_party/phpxmlrpc/README
@@ -1,5 +1,3 @@
-This code is part of sourceforge project: http://sourceforge.net/projects/phpxmlrpc/
-
 NAME: XMLRPC FOR PHP
 
 DESCRIPTION: A php library for building xmlrpc clients and servers
diff --git a/third_party/phpxmlrpc/lib/xmlrpc.inc b/third_party/phpxmlrpc/lib/xmlrpc.inc
index 28c1d6d..080ddf6 100644
--- a/third_party/phpxmlrpc/lib/xmlrpc.inc
+++ b/third_party/phpxmlrpc/lib/xmlrpc.inc
@@ -1,7 +1,7 @@
 <?php
 // by Edd Dumbill (C) 1999-2002
 // <edd@usefulinc.com>
-// xmlrpc.inc,v 1.158 2007/03/01 21:21:02 ggiunta
+// $Id: xmlrpc.inc,v 1.174 2009/03/16 19:36:38 ggiunta Exp $
 
 // Copyright (c) 1999,2000,2002 Edd Dumbill.
 // All rights reserved.
@@ -45,29 +45,6 @@
 		}
 	}
 
-	// Try to be backward compat with php < 4.2 (are we not being nice ?)
-	$phpversion = phpversion();
-	if($phpversion[0] == '4' && $phpversion[2] < 2)
-	{
-		// give an opportunity to user to specify where to include other files from
-		if(!defined('PHP_XMLRPC_COMPAT_DIR'))
-		{
-			define('PHP_XMLRPC_COMPAT_DIR',dirname(__FILE__).'/compat/');
-		}
-		if($phpversion[2] == '0')
-		{
-			if($phpversion[4] < 6)
-			{
-				include(PHP_XMLRPC_COMPAT_DIR.'is_callable.php');
-			}
-			include(PHP_XMLRPC_COMPAT_DIR.'is_scalar.php');
-			include(PHP_XMLRPC_COMPAT_DIR.'array_key_exists.php');
-			include(PHP_XMLRPC_COMPAT_DIR.'version_compare.php');
-		}
-		include(PHP_XMLRPC_COMPAT_DIR.'var_export.php');
-		include(PHP_XMLRPC_COMPAT_DIR.'is_a.php');
-	}
-
 	// G. Giunta 2005/01/29: declare global these variables,
 	// so that xmlrpc.inc will work even if included from within a function
 	// Milosch: 2005/08/07 - explicitly request these via $GLOBALS where used.
@@ -112,7 +89,8 @@
 		'METHODNAME' => array('METHODCALL'),
 		'PARAMS' => array('METHODCALL', 'METHODRESPONSE'),
 		'FAULT' => array('METHODRESPONSE'),
-		'NIL' => array('VALUE') // only used when extension activated
+		'NIL' => array('VALUE'), // only used when extension activated
+		'EX:NIL' => array('VALUE') // only used when extension activated
 	);
 
 	// define extra types for supporting NULL (useful for json or <NIL/>)
@@ -145,71 +123,80 @@
 		$GLOBALS['xml_iso88591_Entities']['out'][] = '&#'.$i.';';
 	}
 
-	/// @todo add to iso table the characters from cp_1252 range, i.e. 128 to 159.
+	/// @todo add to iso table the characters from cp_1252 range, i.e. 128 to 159?
 	/// These will NOT be present in true ISO-8859-1, but will save the unwary
-	/// windows user from sending junk.
-/*
-$cp1252_to_xmlent =
-  array(
-   '\x80'=>'&#x20AC;', '\x81'=>'?', '\x82'=>'&#x201A;', '\x83'=>'&#x0192;',
-   '\x84'=>'&#x201E;', '\x85'=>'&#x2026;', '\x86'=>'&#x2020;', \x87'=>'&#x2021;',
-   '\x88'=>'&#x02C6;', '\x89'=>'&#x2030;', '\x8A'=>'&#x0160;', '\x8B'=>'&#x2039;',
-   '\x8C'=>'&#x0152;', '\x8D'=>'?', '\x8E'=>'&#x017D;', '\x8F'=>'?',
-   '\x90'=>'?', '\x91'=>'&#x2018;', '\x92'=>'&#x2019;', '\x93'=>'&#x201C;',
-   '\x94'=>'&#x201D;', '\x95'=>'&#x2022;', '\x96'=>'&#x2013;', '\x97'=>'&#x2014;',
-   '\x98'=>'&#x02DC;', '\x99'=>'&#x2122;', '\x9A'=>'&#x0161;', '\x9B'=>'&#x203A;',
-   '\x9C'=>'&#x0153;', '\x9D'=>'?', '\x9E'=>'&#x017E;', '\x9F'=>'&#x0178;'
-  );
-*/
+	/// windows user from sending junk (though no luck when reciving them...)
+  /*
+	$GLOBALS['xml_cp1252_Entities']=array();
+	for ($i = 128; $i < 160; $i++)
+	{
+		$GLOBALS['xml_cp1252_Entities']['in'][] = chr($i);
+	}
+	$GLOBALS['xml_cp1252_Entities']['out'] = array(
+		'&#x20AC;', '?',        '&#x201A;', '&#x0192;',
+		'&#x201E;', '&#x2026;', '&#x2020;', '&#x2021;',
+		'&#x02C6;', '&#x2030;', '&#x0160;', '&#x2039;',
+		'&#x0152;', '?',        '&#x017D;', '?',
+		'?',        '&#x2018;', '&#x2019;', '&#x201C;',
+		'&#x201D;', '&#x2022;', '&#x2013;', '&#x2014;',
+		'&#x02DC;', '&#x2122;', '&#x0161;', '&#x203A;',
+		'&#x0153;', '?',        '&#x017E;', '&#x0178;'
+	);
+  */
+
+	$GLOBALS['xmlrpcerr'] = array(
+	'unknown_method'=>1,
+	'invalid_return'=>2,
+	'incorrect_params'=>3,
+	'introspect_unknown'=>4,
+	'http_error'=>5,
+	'no_data'=>6,
+	'no_ssl'=>7,
+	'curl_fail'=>8,
+	'invalid_request'=>15,
+	'no_curl'=>16,
+	'server_error'=>17,
+	'multicall_error'=>18,
+	'multicall_notstruct'=>9,
+	'multicall_nomethod'=>10,
+	'multicall_notstring'=>11,
+	'multicall_recursion'=>12,
+	'multicall_noparams'=>13,
+	'multicall_notarray'=>14,
+
+	'cannot_decompress'=>103,
+	'decompress_fail'=>104,
+	'dechunk_fail'=>105,
+	'server_cannot_decompress'=>106,
+	'server_decompress_fail'=>107
+	);
 
-	$GLOBALS['xmlrpcerr']['unknown_method']=1;
-	$GLOBALS['xmlrpcstr']['unknown_method']='Unknown method';
-	$GLOBALS['xmlrpcerr']['invalid_return']=2;
-	$GLOBALS['xmlrpcstr']['invalid_return']='Invalid return payload: enable debugging to examine incoming payload';
-	$GLOBALS['xmlrpcerr']['incorrect_params']=3;
-	$GLOBALS['xmlrpcstr']['incorrect_params']='Incorrect parameters passed to method';
-	$GLOBALS['xmlrpcerr']['introspect_unknown']=4;
-	$GLOBALS['xmlrpcstr']['introspect_unknown']="Can't introspect: method unknown";
-	$GLOBALS['xmlrpcerr']['http_error']=5;
-	$GLOBALS['xmlrpcstr']['http_error']="Didn't receive 200 OK from remote server.";
-	$GLOBALS['xmlrpcerr']['no_data']=6;
-	$GLOBALS['xmlrpcstr']['no_data']='No data received from server.';
-	$GLOBALS['xmlrpcerr']['no_ssl']=7;
-	$GLOBALS['xmlrpcstr']['no_ssl']='No SSL support compiled in.';
-	$GLOBALS['xmlrpcerr']['curl_fail']=8;
-	$GLOBALS['xmlrpcstr']['curl_fail']='CURL error';
-	$GLOBALS['xmlrpcerr']['invalid_request']=15;
-	$GLOBALS['xmlrpcstr']['invalid_request']='Invalid request payload';
-	$GLOBALS['xmlrpcerr']['no_curl']=16;
-	$GLOBALS['xmlrpcstr']['no_curl']='No CURL support compiled in.';
-	$GLOBALS['xmlrpcerr']['server_error']=17;
-	$GLOBALS['xmlrpcstr']['server_error']='Internal server error';
-	$GLOBALS['xmlrpcerr']['multicall_error']=18;
-	$GLOBALS['xmlrpcstr']['multicall_error']='Received from server invalid multicall response';
-
-	$GLOBALS['xmlrpcerr']['multicall_notstruct'] = 9;
-	$GLOBALS['xmlrpcstr']['multicall_notstruct'] = 'system.multicall expected struct';
-	$GLOBALS['xmlrpcerr']['multicall_nomethod']  = 10;
-	$GLOBALS['xmlrpcstr']['multicall_nomethod']  = 'missing methodName';
-	$GLOBALS['xmlrpcerr']['multicall_notstring'] = 11;
-	$GLOBALS['xmlrpcstr']['multicall_notstring'] = 'methodName is not a string';
-	$GLOBALS['xmlrpcerr']['multicall_recursion'] = 12;
-	$GLOBALS['xmlrpcstr']['multicall_recursion'] = 'recursive system.multicall forbidden';
-	$GLOBALS['xmlrpcerr']['multicall_noparams']  = 13;
-	$GLOBALS['xmlrpcstr']['multicall_noparams']  = 'missing params';
-	$GLOBALS['xmlrpcerr']['multicall_notarray']  = 14;
-	$GLOBALS['xmlrpcstr']['multicall_notarray']  = 'params is not an array';
-
-	$GLOBALS['xmlrpcerr']['cannot_decompress']=103;
-	$GLOBALS['xmlrpcstr']['cannot_decompress']='Received from server compressed HTTP and cannot decompress';
-	$GLOBALS['xmlrpcerr']['decompress_fail']=104;
-	$GLOBALS['xmlrpcstr']['decompress_fail']='Received from server invalid compressed HTTP';
-	$GLOBALS['xmlrpcerr']['dechunk_fail']=105;
-	$GLOBALS['xmlrpcstr']['dechunk_fail']='Received from server invalid chunked HTTP';
-	$GLOBALS['xmlrpcerr']['server_cannot_decompress']=106;
-	$GLOBALS['xmlrpcstr']['server_cannot_decompress']='Received from client compressed HTTP request and cannot decompress';
-	$GLOBALS['xmlrpcerr']['server_decompress_fail']=107;
-	$GLOBALS['xmlrpcstr']['server_decompress_fail']='Received from client invalid compressed HTTP request';
+	$GLOBALS['xmlrpcstr'] = array(
+	'unknown_method'=>'Unknown method',
+	'invalid_return'=>'Invalid return payload: enable debugging to examine incoming payload',
+	'incorrect_params'=>'Incorrect parameters passed to method',
+	'introspect_unknown'=>"Can't introspect: method unknown",
+	'http_error'=>"Didn't receive 200 OK from remote server.",
+	'no_data'=>'No data received from server.',
+	'no_ssl'=>'No SSL support compiled in.',
+	'curl_fail'=>'CURL error',
+	'invalid_request'=>'Invalid request payload',
+	'no_curl'=>'No CURL support compiled in.',
+	'server_error'=>'Internal server error',
+	'multicall_error'=>'Received from server invalid multicall response',
+	'multicall_notstruct'=>'system.multicall expected struct',
+	'multicall_nomethod'=>'missing methodName',
+	'multicall_notstring'=>'methodName is not a string',
+	'multicall_recursion'=>'recursive system.multicall forbidden',
+	'multicall_noparams'=>'missing params',
+	'multicall_notarray'=>'params is not an array',
+
+	'cannot_decompress'=>'Received from server compressed HTTP and cannot decompress',
+	'decompress_fail'=>'Received from server invalid compressed HTTP',
+	'dechunk_fail'=>'Received from server invalid chunked HTTP',
+	'server_cannot_decompress'=>'Received from client compressed HTTP request and cannot decompress',
+	'server_decompress_fail'=>'Received from client invalid compressed HTTP request'
+	);
 
 	// The charset encoding used by the server for received messages and
 	// by the client for received responses when received charset cannot be determined
@@ -222,7 +209,7 @@ $cp1252_to_xmlent =
 	$GLOBALS['xmlrpc_internalencoding']='ISO-8859-1';
 
 	$GLOBALS['xmlrpcName']='XML-RPC for PHP';
-	$GLOBALS['xmlrpcVersion']='2.2';
+	$GLOBALS['xmlrpcVersion']='3.0.0.beta';
 
 	// let user errors start at 800
 	$GLOBALS['xmlrpcerruser']=800;
@@ -234,9 +221,12 @@ $cp1252_to_xmlent =
 	/// @deprecated
 	$GLOBALS['xmlrpc_backslash']=chr(92).chr(92);
 
-	// set to TRUE to enable correct decoding of <NIL/> values
+	// set to TRUE to enable correct decoding of <NIL/> and <EX:NIL/> values
 	$GLOBALS['xmlrpc_null_extension']=false;
 
+	// set to TRUE to enable encoding of php NULL values to <EX:NIL/> instead of <NIL/>
+	$GLOBALS['xmlrpc_null_apache_encoding']=false;
+
 	// used to store state during parsing
 	// quick explanation of components:
 	//   ac - used to accumulate values
@@ -289,6 +279,7 @@ $cp1252_to_xmlent =
 			case 'US-ASCII_':
 			case 'US-ASCII_ISO-8859-1':
 			case 'UTF-8_UTF-8':
+			//case 'CP1252_CP1252':
 				$escaped_data = str_replace(array('&', '"', "'", '<', '>'), array('&amp;', '&quot;', '&apos;', '&lt;', '&gt;'), $data);
 				break;
 			case 'UTF-8_':
@@ -341,7 +332,7 @@ $cp1252_to_xmlent =
 		//3 16 1110bbbb 10bbbbbb 10bbbbbb
 		else if ($ii>>4 == 14)
 		{
-			$b1 = ($ii & 31);
+			$b1 = ($ii & 15);
 			$ii = ord($data[$nn+1]);
 			$b2 = ($ii & 63);
 			$ii = ord($data[$nn+2]);
@@ -354,7 +345,7 @@ $cp1252_to_xmlent =
 		//4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb
 		else if ($ii>>3 == 30)
 		{
-			$b1 = ($ii & 31);
+			$b1 = ($ii & 7);
 			$ii = ord($data[$nn+1]);
 			$b2 = ($ii & 63);
 			$ii = ord($data[$nn+2]);
@@ -368,6 +359,25 @@ $cp1252_to_xmlent =
 		}
 	}
 				break;
+/*
+			case 'CP1252_':
+			case 'CP1252_US-ASCII':
+				$escaped_data = str_replace(array('&', '"', "'", '<', '>'), array('&amp;', '&quot;', '&apos;', '&lt;', '&gt;'), $data);
+				$escaped_data = str_replace($GLOBALS['xml_iso88591_Entities']['in'], $GLOBALS['xml_iso88591_Entities']['out'], $escaped_data);
+				$escaped_data = str_replace($GLOBALS['xml_cp1252_Entities']['in'], $GLOBALS['xml_cp1252_Entities']['out'], $escaped_data);
+				break;
+			case 'CP1252_UTF-8':
+				$escaped_data = str_replace(array('&', '"', "'", '<', '>'), array('&amp;', '&quot;', '&apos;', '&lt;', '&gt;'), $data);
+				/// @todo we could use real UTF8 chars here instead of xml entities... (note that utf_8 encode all allone will NOT convert them)
+				$escaped_data = str_replace($GLOBALS['xml_cp1252_Entities']['in'], $GLOBALS['xml_cp1252_Entities']['out'], $escaped_data);
+				$escaped_data = utf8_encode($escaped_data);
+				break;
+			case 'CP1252_ISO-8859-1':
+				$escaped_data = str_replace(array('&', '"', "'", '<', '>'), array('&amp;', '&quot;', '&apos;', '&lt;', '&gt;'), $data);
+				// we might as well replave all funky chars with a '?' here, but we are kind and leave it to the receiving application layer to decide what to do with these weird entities...
+				$escaped_data = str_replace($GLOBALS['xml_cp1252_Entities']['in'], $GLOBALS['xml_cp1252_Entities']['out'], $escaped_data);
+				break;
+*/
 			default:
 				$escaped_data = '';
 				error_log("Converting from $src_encoding to $dest_encoding: not supported...");
@@ -397,6 +407,7 @@ $cp1252_to_xmlent =
 				else
 				{
 					$GLOBALS['_xh']['rt'] = strtolower($name);
+					$GLOBALS['_xh']['rt'] = strtolower($name);
 				}
 			}
 			else
@@ -489,6 +500,7 @@ $cp1252_to_xmlent =
 					$GLOBALS['_xh']['vt']=null;
 					break;
 				case 'NIL':
+				case 'EX:NIL':
 					if ($GLOBALS['xmlrpc_null_extension'])
 					{
 						if ($GLOBALS['_xh']['vt']!='value')
@@ -551,7 +563,7 @@ $cp1252_to_xmlent =
 					if ($rebuild_xmlrpcvals)
 					{
 						// build the xmlrpc val out of the data received, and substitute it
-						$temp =& new xmlrpcval($GLOBALS['_xh']['value'], $GLOBALS['_xh']['vt']);
+						$temp = new xmlrpcval($GLOBALS['_xh']['value'], $GLOBALS['_xh']['vt']);
 						// in case we got info about underlying php class, save it
 						// in the object we're rebuilding
 						if (isset($GLOBALS['_xh']['php_class']))
@@ -594,8 +606,8 @@ $cp1252_to_xmlent =
 				case 'DATETIME.ISO8601':
 				case 'BASE64':
 					$GLOBALS['_xh']['vt']=strtolower($name);
-        			/// @todo: optimization creep - remove the if/elseif cycle below
-                    /// since the case() in which we are already did that
+					/// @todo: optimization creep - remove the if/elseif cycle below
+					/// since the case() in which we are already did that
 					if ($name=='STRING')
 					{
 						$GLOBALS['_xh']['value']=$GLOBALS['_xh']['ac'];
@@ -629,7 +641,7 @@ $cp1252_to_xmlent =
 						else
 						{
 							// log if receiveing something strange, even though we set the value to false anyway
-							if ($GLOBALS['_xh']['ac']!='0' && strcasecmp($_xh[$parser]['ac'], 'false') != 0)
+							if ($GLOBALS['_xh']['ac']!='0' && strcasecmp($GLOBALS['_xh']['ac'], 'false') != 0)
 								error_log('XML-RPC: invalid value received in BOOLEAN: '.$GLOBALS['_xh']['ac']);
 							$GLOBALS['_xh']['value']=false;
 						}
@@ -638,10 +650,10 @@ $cp1252_to_xmlent =
 					{
 						// we have a DOUBLE
 						// we must check that only 0123456789-.<space> are characters here
-						if (!preg_match('/^[+-]?[eE0123456789 \t.]+$/', $GLOBALS['_xh']['ac']))
+						// NOTE: regexp could be much stricter than this...
+						if (!preg_match('/^[+-eE0123456789 \t.]+$/', $GLOBALS['_xh']['ac']))
 						{
-							/// @todo: find a better way of throwing an error
-							// than this!
+							/// @todo: find a better way of throwing an error than this!
 							error_log('XML-RPC: non numeric value received in DOUBLE: '.$GLOBALS['_xh']['ac']);
 							$GLOBALS['_xh']['value']='ERROR_NON_NUMERIC_FOUND';
 						}
@@ -657,8 +669,7 @@ $cp1252_to_xmlent =
 						// we must check that only 0123456789-<space> are characters here
 						if (!preg_match('/^[+-]?[0123456789 \t]+$/', $GLOBALS['_xh']['ac']))
 						{
-							/// @todo find a better way of throwing an error
-							// than this!
+							/// @todo find a better way of throwing an error than this!
 							error_log('XML-RPC: non numeric value received in INT: '.$GLOBALS['_xh']['ac']);
 							$GLOBALS['_xh']['value']='ERROR_NON_NUMERIC_FOUND';
 						}
@@ -715,6 +726,7 @@ $cp1252_to_xmlent =
 					$GLOBALS['_xh']['method']=preg_replace('/^[\n\r\t ]+/', '', $GLOBALS['_xh']['ac']);
 					break;
 				case 'NIL':
+				case 'EX:NIL':
 					if ($GLOBALS['xmlrpc_null_extension'])
 					{
 						$GLOBALS['_xh']['vt']='null';
@@ -816,6 +828,8 @@ $cp1252_to_xmlent =
 		var $proxy_pass='';
 		var $proxy_authtype=1;
 		var $cookies=array();
+		var $extracurlopts=array();
+
 		/**
 		* List of http compression methods accepted by the client for responses.
 		* NB: PHP supports deflate, gzip compressions out of the box if compiled w. zlib
@@ -847,6 +861,10 @@ $cp1252_to_xmlent =
 		* valid strings are 'xmlrpcvals', 'phpvals' or 'xml'
 		*/
 		var $return_type = 'xmlrpcvals';
+		/**
+		* Sent to servers in http headers
+		*/
+		var $user_agent;
 
 		/**
 		* @param string $path either the complete server URL or the PATH part of the xmlrc server URL, e.g. /xmlrpc/server.php
@@ -861,7 +879,7 @@ $cp1252_to_xmlent =
 			{
 				$parts = parse_url($path);
 				$server = $parts['host'];
-				$path = $parts['path'];
+				$path = isset($parts['path']) ? $parts['path'] : '';
 				if(isset($parts['query']))
 				{
 					$path .= '?'.$parts['query'];
@@ -914,15 +932,14 @@ $cp1252_to_xmlent =
 				$this->accepted_compression = array('gzip', 'deflate');
 			}
 
-			// keepalives: enabled by default ONLY for PHP >= 4.3.8
-			// (see http://curl.haxx.se/docs/faq.html#7.3)
-			if(version_compare(phpversion(), '4.3.8') >= 0)
-			{
-				$this->keepalive = true;
-			}
+			// keepalives: enabled by default
+			$this->keepalive = true;
 
 			// by default the xml parser can support these 3 charset encodings
 			$this->accepted_charset_encodings = array('UTF-8', 'ISO-8859-1', 'US-ASCII');
+
+			// initialize user_agent string
+			$this->user_agent = $GLOBALS['xmlrpcName'] . ' ' . $GLOBALS['xmlrpcVersion'];
 		}
 
 		/**
@@ -972,21 +989,21 @@ $cp1252_to_xmlent =
 		{
 			if ($is_dir)
 			{
-				$this->cacert = $cacert;
+				$this->cacertdir = $cacert;
 			}
 			else
 			{
-				$this->cacertdir = $cacert;
+				$this->cacert = $cacert;
 			}
 		}
 
 		/**
 		* Set attributes for SSL communication: private SSL key
+		* NB: does not work in older php/curl installs
+		* Thanks to Daniel Convissor
 		* @param string $key The name of a file containing a private SSL key
 		* @param string $keypass The secret password needed to use the private SSL key
 		* @access public
-		* NB: does not work in older php/curl installs
-		* Thanks to Daniel Convissor
 		*/
 		function setKey($key, $keypass)
 		{
@@ -1090,6 +1107,25 @@ $cp1252_to_xmlent =
 		}
 
 		/**
+		* Directly set cURL options, for extra flexibility
+		* It allows eg. to bind client to a specific IP interface / address
+		* @param $options array
+		*/
+		function SetCurlOptions( $options )
+		{
+			$this->extracurlopts = $options;
+		}
+
+		/**
+		* Set user-agent string that will be used by this client instance
+		* in http headers sent to the server
+		*/
+		function SetUserAgent( $agentstring )
+		{
+			$this->user_agent = $agentstring;
+		}
+
+		/**
 		* Send an xmlrpc request
 		* @param mixed $msg The message object, or an array of messages for using multicall, or the complete xml representation of a request
 		* @param integer $timeout Connection timeout, in seconds, If unspecified, a platform specific timeout will apply
@@ -1114,7 +1150,7 @@ $cp1252_to_xmlent =
 			}
 			elseif(is_string($msg))
 			{
-				$n =& new xmlrpcmsg('');
+				$n = new xmlrpcmsg('');
 				$n->payload = $msg;
 				$msg = $n;
 			}
@@ -1243,7 +1279,7 @@ $cp1252_to_xmlent =
 				$credentials='Authorization: Basic ' . base64_encode($username . ':' . $password) . "\r\n";
 				if ($authtype != 1)
 				{
-					error_log('XML-RPC: xmlrpc_client::send: warning. Only Basic auth is supported with HTTP 1.0');
+					error_log('XML-RPC: '.__METHOD__.': warning. Only Basic auth is supported with HTTP 1.0');
 				}
 			}
 
@@ -1267,7 +1303,7 @@ $cp1252_to_xmlent =
 				{
 					if ($proxyauthtype != 1)
 					{
-						error_log('XML-RPC: xmlrpc_client::send: warning. Only Basic auth to proxy is supported with HTTP 1.0');
+						error_log('XML-RPC: '.__METHOD__.': warning. Only Basic auth to proxy is supported with HTTP 1.0');
 					}
 					$proxy_credentials = 'Proxy-Authorization: Basic ' . base64_encode($proxyusername.':'.$proxypassword) . "\r\n";
 				}
@@ -1282,28 +1318,32 @@ $cp1252_to_xmlent =
 			// Cookie generation, as per rfc2965 (version 1 cookies) or
 			// netscape's rules (version 0 cookies)
 			$cookieheader='';
-			foreach ($this->cookies as $name => $cookie)
+			if (count($this->cookies))
 			{
-				if ($cookie['version'])
-				{
-					$cookieheader .= 'Cookie: $Version="' . $cookie['version'] . '"; ';
-					$cookieheader .= $name . '="' . $cookie['value'] . '";';
-					if ($cookie['path'])
-						$cookieheader .= ' $Path="' . $cookie['path'] . '";';
-					if ($cookie['domain'])
-						$cookieheader .= ' $Domain="' . $cookie['domain'] . '";';
-					if ($cookie['port'])
-						$cookieheader .= ' $Port="' . $cookie['domain'] . '";';
-					$cookieheader = substr($cookieheader, 0, -1) . "\r\n";
-				}
-				else
+				$version = '';
+				foreach ($this->cookies as $name => $cookie)
 				{
-					$cookieheader .= 'Cookie: ' . $name . '=' . $cookie['value'] . "\r\n";
+					if ($cookie['version'])
+					{
+						$version = ' $Version="' . $cookie['version'] . '";';
+						$cookieheader .= ' ' . $name . '="' . $cookie['value'] . '";';
+						if ($cookie['path'])
+							$cookieheader .= ' $Path="' . $cookie['path'] . '";';
+						if ($cookie['domain'])
+							$cookieheader .= ' $Domain="' . $cookie['domain'] . '";';
+						if ($cookie['port'])
+							$cookieheader .= ' $Port="' . $cookie['port'] . '";';
+					}
+					else
+					{
+						$cookieheader .= ' ' . $name . '=' . $cookie['value'] . ";";
+					}
 				}
+				$cookieheader = 'Cookie:' . $version . substr($cookieheader, 0, -1) . "\r\n";
 			}
 
 			$op= 'POST ' . $uri. " HTTP/1.0\r\n" .
-				'User-Agent: ' . $GLOBALS['xmlrpcName'] . ' ' . $GLOBALS['xmlrpcVersion'] . "\r\n" .
+				'User-Agent: ' . $this->user_agent . "\r\n" .
 				'Host: '. $server . ':' . $port . "\r\n" .
 				$credentials .
 				$proxy_credentials .
@@ -1340,14 +1380,15 @@ $cp1252_to_xmlent =
 			else
 			{
 				$this->errstr='Connect error: '.$this->errstr;
-				$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['http_error'], $this->errstr . ' (' . $this->errno . ')');
+				$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['http_error'], $this->errstr . ' (' . $this->errno . ')');
 				return $r;
 			}
 
 			if(!fputs($fp, $op, strlen($op)))
 			{
+				fclose($fp);
 				$this->errstr='Write error';
-				$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['http_error'], $this->errstr);
+				$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['http_error'], $this->errstr);
 				return $r;
 			}
 			else
@@ -1358,12 +1399,12 @@ $cp1252_to_xmlent =
 			// G. Giunta 2005/10/24: close socket before parsing.
 			// should yeld slightly better execution times, and make easier recursive calls (e.g. to follow http redirects)
 			$ipd='';
-			while($data=fread($fp, 32768))
+			do
 			{
 				// shall we check for $data === FALSE?
 				// as per the manual, it signals an error
-				$ipd.=$data;
-			}
+				$ipd.=fread($fp, 32768);
+			} while(!feof($fp));
 			fclose($fp);
 			$r =& $msg->parseResponse($ipd, false, $this->return_type);
 			return $r;
@@ -1398,7 +1439,7 @@ $cp1252_to_xmlent =
 			if(!function_exists('curl_init'))
 			{
 				$this->errstr='CURL unavailable on this install';
-				$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['no_curl'], $GLOBALS['xmlrpcstr']['no_curl']);
+				$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['no_curl'], $GLOBALS['xmlrpcstr']['no_curl']);
 				return $r;
 			}
 			if($method == 'https')
@@ -1407,7 +1448,7 @@ $cp1252_to_xmlent =
 					((is_string($info) && strpos($info, 'OpenSSL') === null) || (is_array($info) && !isset($info['ssl_version']))))
 				{
 					$this->errstr='SSL unavailable on this install';
-					$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['no_ssl'], $GLOBALS['xmlrpcstr']['no_ssl']);
+					$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['no_ssl'], $GLOBALS['xmlrpcstr']['no_ssl']);
 					return $r;
 				}
 			}
@@ -1485,7 +1526,7 @@ $cp1252_to_xmlent =
 			{
 				curl_setopt($curl, CURLOPT_VERBOSE, 1);
 			}
-			curl_setopt($curl, CURLOPT_USERAGENT, $GLOBALS['xmlrpcName'].' '.$GLOBALS['xmlrpcVersion']);
+			curl_setopt($curl, CURLOPT_USERAGENT, $this->user_agent);
 			// required for XMLRPC: post the data
 			curl_setopt($curl, CURLOPT_POST, 1);
 			// the data
@@ -1538,7 +1579,7 @@ $cp1252_to_xmlent =
 				}
 				else if ($authtype != 1)
 				{
-					error_log('XML-RPC: xmlrpc_client::send: warning. Only Basic auth is supported by the current PHP/curl install');
+					error_log('XML-RPC: '.__METHOD__.': warning. Only Basic auth is supported by the current PHP/curl install');
 				}
 			}
 
@@ -1586,7 +1627,7 @@ $cp1252_to_xmlent =
 				{
 					$proxyport = 8080; // NB: even for HTTPS, local connection is on port 8080
 				}
-				curl_setopt($curl, CURLOPT_PROXY,$proxyhost.':'.$proxyport);
+				curl_setopt($curl, CURLOPT_PROXY, $proxyhost.':'.$proxyport);
 				//curl_setopt($curl, CURLOPT_PROXYPORT,$proxyport);
 				if($proxyusername)
 				{
@@ -1597,33 +1638,47 @@ $cp1252_to_xmlent =
 					}
 					else if ($proxyauthtype != 1)
 					{
-						error_log('XML-RPC: xmlrpc_client::send: warning. Only Basic auth to proxy is supported by the current PHP/curl install');
+						error_log('XML-RPC: '.__METHOD__.': warning. Only Basic auth to proxy is supported by the current PHP/curl install');
 					}
 				}
 			}
 
 			// NB: should we build cookie http headers by hand rather than let CURL do it?
 			// the following code does not honour 'expires', 'path' and 'domain' cookie attributes
-			// set to clint obj the the user...
+			// set to client obj the the user...
 			if (count($this->cookies))
 			{
 				$cookieheader = '';
 				foreach ($this->cookies as $name => $cookie)
 				{
-					$cookieheader .= $name . '=' . $cookie['value'] . ', ';
+					$cookieheader .= $name . '=' . $cookie['value'] . '; ';
 				}
 				curl_setopt($curl, CURLOPT_COOKIE, substr($cookieheader, 0, -2));
 			}
 
+			foreach ($this->extracurlopts as $opt => $val)
+			{
+				curl_setopt($curl, $opt, $val);
+			}
+
 			$result = curl_exec($curl);
 
-			if(!$result)
+			if ($this->debug > 1)
+			{
+				print "<PRE>\n---CURL INFO---\n";
+				foreach(curl_getinfo($curl) as $name => $val)
+					 print $name . ': ' . htmlentities($val, ENT_COMPAT, 'UTF-8'). "\n";
+				print "---END---\n</PRE>";
+			}
+
+			if(!$result) /// @todo we should use a better check here - what if we get back '' or '0'?
 			{
 				$this->errstr='no response';
-				$resp=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['curl_fail'], $GLOBALS['xmlrpcstr']['curl_fail']. ': '. curl_error($curl));
-				if(!$keepalive)
+				$resp=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['curl_fail'], $GLOBALS['xmlrpcstr']['curl_fail']. ': '. curl_error($curl));
+				curl_close($curl);
+				if($keepalive)
 				{
-					curl_close($curl);
+					$this->xmlrpc_curl_handle = null;
 				}
 			}
 			else
@@ -1690,7 +1745,7 @@ $cp1252_to_xmlent =
 						}
 						else
 						{
-							$result =& new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['multicall_error'], $GLOBALS['xmlrpcstr']['multicall_error']);
+							$result = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['multicall_error'], $GLOBALS['xmlrpcstr']['multicall_error']);
 						}
 					}
 				}
@@ -1737,17 +1792,17 @@ $cp1252_to_xmlent =
 			$calls = array();
 			foreach($msgs as $msg)
 			{
-				$call['methodName'] =& new xmlrpcval($msg->method(),'string');
+				$call['methodName'] = new xmlrpcval($msg->method(),'string');
 				$numParams = $msg->getNumParams();
 				$params = array();
 				for($i = 0; $i < $numParams; $i++)
 				{
 					$params[$i] = $msg->getParam($i);
 				}
-				$call['params'] =& new xmlrpcval($params, 'array');
-				$calls[] =& new xmlrpcval($call, 'struct');
+				$call['params'] = new xmlrpcval($params, 'array');
+				$calls[] = new xmlrpcval($call, 'struct');
 			}
-			$multicall =& new xmlrpcmsg('system.multicall');
+			$multicall = new xmlrpcmsg('system.multicall');
 			$multicall->addParam(new xmlrpcval($calls, 'array'));
 
 			// Attempt RPC call
@@ -1795,7 +1850,7 @@ $cp1252_to_xmlent =
 								return false;		// Bad value
 							}
 							// Normal return value
-							$response[$i] =& new xmlrpcresp($val[0], 0, '', 'phpvals');
+							$response[$i] = new xmlrpcresp($val[0], 0, '', 'phpvals');
 							break;
 						case 2:
 							///	@todo remove usage of @: it is apparently quite slow
@@ -1809,7 +1864,7 @@ $cp1252_to_xmlent =
 							{
 								return false;
 							}
-							$response[$i] =& new xmlrpcresp(0, $code, $str);
+							$response[$i] = new xmlrpcresp(0, $code, $str);
 							break;
 						default:
 							return false;
@@ -1842,7 +1897,7 @@ $cp1252_to_xmlent =
 								return false;		// Bad value
 							}
 							// Normal return value
-							$response[$i] =& new xmlrpcresp($val->arraymem(0));
+							$response[$i] = new xmlrpcresp($val->arraymem(0));
 							break;
 						case 'struct':
 							$code = $val->structmem('faultCode');
@@ -1855,7 +1910,7 @@ $cp1252_to_xmlent =
 							{
 								return false;
 							}
-							$response[$i] =& new xmlrpcresp(0, $code->scalarval(), $str->scalarval());
+							$response[$i] = new xmlrpcresp(0, $code->scalarval(), $str->scalarval());
 							break;
 						default:
 							return false;
@@ -2165,6 +2220,11 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 		/**
 		* Given an open file handle, read all data available and parse it as axmlrpc response.
 		* NB: the file handle is not closed by this function.
+		* NNB: might have trouble in rare cases to work on network streams, as we
+		*      check for a read of 0 bytes instead of feof($fp).
+		*      But since checking for feof(null) returns false, we would risk an
+		*      infinite loop in that case, because we cannot trust the caller
+		*      to give us a valid pointer to an open file...
 		* @access public
 		* @return xmlrpcresp
 		* @todo add 2nd & 3rd param to be passed to ParseResponse() ???
@@ -2218,8 +2278,8 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 					}
 					else
 					{
-						error_log('XML-RPC: xmlrpcmsg::parseResponse: HTTPS via proxy error, tunnel connection possibly failed');
-						$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['http_error'], $GLOBALS['xmlrpcstr']['http_error']. ' (HTTPS via proxy error, tunnel connection possibly failed)');
+						error_log('XML-RPC: '.__METHOD__.': HTTPS via proxy error, tunnel connection possibly failed');
+						$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['http_error'], $GLOBALS['xmlrpcstr']['http_error']. ' (HTTPS via proxy error, tunnel connection possibly failed)');
 						return $r;
 					}
 				}
@@ -2239,8 +2299,8 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 				if(!preg_match('/^HTTP\/[0-9.]+ 200 /', $data))
 				{
 					$errstr= substr($data, 0, strpos($data, "\n")-1);
-					error_log('XML-RPC: xmlrpcmsg::parseResponse: HTTP error, got response: ' .$errstr);
-					$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['http_error'], $GLOBALS['xmlrpcstr']['http_error']. ' (' . $errstr . ')');
+					error_log('XML-RPC: '.__METHOD__.': HTTP error, got response: ' .$errstr);
+					$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['http_error'], $GLOBALS['xmlrpcstr']['http_error']. ' (' . $errstr . ')');
 					return $r;
 				}
 
@@ -2303,6 +2363,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 									$GLOBALS['_xh']['headers'][$header_name] = trim($cookie);
 								// parse cookie attributes, in case user wants to correctly honour them
 								// feature creep: only allow rfc-compliant cookie attributes?
+								// @todo support for server sending multiple time cookie with same name, but using different PATHs
 								$cookie = explode(';', $cookie);
 								foreach ($cookie as $pos => $val)
 								{
@@ -2318,7 +2379,10 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 									}
 									else
 									{
-										$GLOBALS['_xh']['cookies'][$cookiename][$tag] = $val;
+										if ($tag != 'value')
+										{
+										  $GLOBALS['_xh']['cookies'][$cookiename][$tag] = $val;
+										}
 									}
 								}
 							}
@@ -2360,8 +2424,8 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 					{
 						if(!$data = decode_chunked($data))
 						{
-							error_log('XML-RPC: xmlrpcmsg::parseResponse: errors occurred when trying to rebuild the chunked data received from server');
-							$r =& new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['dechunk_fail'], $GLOBALS['xmlrpcstr']['dechunk_fail']);
+							error_log('XML-RPC: '.__METHOD__.': errors occurred when trying to rebuild the chunked data received from server');
+							$r = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['dechunk_fail'], $GLOBALS['xmlrpcstr']['dechunk_fail']);
 							return $r;
 						}
 					}
@@ -2390,22 +2454,22 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 								}
 								else
 								{
-									error_log('XML-RPC: xmlrpcmsg::parseResponse: errors occurred when trying to decode the deflated data received from server');
-									$r =& new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['decompress_fail'], $GLOBALS['xmlrpcstr']['decompress_fail']);
+									error_log('XML-RPC: '.__METHOD__.': errors occurred when trying to decode the deflated data received from server');
+									$r = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['decompress_fail'], $GLOBALS['xmlrpcstr']['decompress_fail']);
 									return $r;
 								}
 							}
 							else
 							{
-								error_log('XML-RPC: xmlrpcmsg::parseResponse: the server sent deflated data. Your php install must have the Zlib extension compiled in to support this.');
-								$r =& new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['cannot_decompress'], $GLOBALS['xmlrpcstr']['cannot_decompress']);
+								error_log('XML-RPC: '.__METHOD__.': the server sent deflated data. Your php install must have the Zlib extension compiled in to support this.');
+								$r = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['cannot_decompress'], $GLOBALS['xmlrpcstr']['cannot_decompress']);
 								return $r;
 							}
 						}
 					}
 				} // end of 'if needed, de-chunk, re-inflate response'
 
-				// real stupid hack to avoid PHP 4 complaining about returning NULL by ref
+				// real stupid hack to avoid PHP complaining about returning NULL by ref
 				$r = null;
 				$r =& $r;
 				return $r;
@@ -2429,8 +2493,8 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 
 			if($data == '')
 			{
-				error_log('XML-RPC: xmlrpcmsg::parseResponse: no response received from server.');
-				$r =& new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['no_data'], $GLOBALS['xmlrpcstr']['no_data']);
+				error_log('XML-RPC: '.__METHOD__.': no response received from server.');
+				$r = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['no_data'], $GLOBALS['xmlrpcstr']['no_data']);
 				return $r;
 			}
 
@@ -2474,23 +2538,16 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 
 			// be tolerant of junk after methodResponse (e.g. javascript ads automatically inserted by free hosts)
 			// idea from Luca Mariano <luca.mariano@email.it> originally in PEARified version of the lib
-			$bd = false;
-			// Poor man's version of strrpos for php 4...
-			$pos = strpos($data, '</methodResponse>');
-			while($pos || is_int($pos))
+			$pos = strrpos($data, '</methodResponse>');
+			if($pos !== false)
 			{
-				$bd = $pos+17;
-				$pos = strpos($data, '</methodResponse>', $bd);
-			}
-			if($bd)
-			{
-				$data = substr($data, 0, $bd);
+				$data = substr($data, 0, $pos+17);
 			}
 
 			// if user wants back raw xml, give it to him
 			if ($return_type == 'xml')
 			{
-				$r =& new xmlrpcresp($data, 0, '', 'xml');
+				$r = new xmlrpcresp($data, 0, '', 'xml');
 				$r->hdrs = $GLOBALS['_xh']['headers'];
 				$r->_cookies = $GLOBALS['_xh']['cookies'];
 				$r->raw_data = $raw_data;
@@ -2515,14 +2572,25 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 			// makes the lib about 200% slower...
 			//if (!is_valid_charset($resp_encoding, array('UTF-8', 'ISO-8859-1', 'US-ASCII')))
 			{
-				error_log('XML-RPC: xmlrpcmsg::parseResponse: invalid charset encoding of received response: '.$resp_encoding);
+				error_log('XML-RPC: '.__METHOD__.': invalid charset encoding of received response: '.$resp_encoding);
 				$resp_encoding = $GLOBALS['xmlrpc_defencoding'];
 			}
 			$parser = xml_parser_create($resp_encoding);
 			xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, true);
 			// G. Giunta 2005/02/13: PHP internally uses ISO-8859-1, so we have to tell
-			// the xml parser to give us back data in the expected charset
-			xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, $GLOBALS['xmlrpc_internalencoding']);
+			// the xml parser to give us back data in the expected charset.
+			// What if internal encoding is not in one of the 3 allowed?
+			// we use the broadest one, ie. utf8
+			// This allows to send data which is native in various charset,
+			// by extending xmlrpc_encode_entitites() and setting xmlrpc_internalencoding
+			if (!in_array($GLOBALS['xmlrpc_internalencoding'], array('UTF-8', 'ISO-8859-1', 'US-ASCII')))
+			{
+				xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, 'UTF-8');
+			}
+			else
+			{
+				xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, $GLOBALS['xmlrpc_internalencoding']);
+			}
 
 			if ($return_type == 'phpvals')
 			{
@@ -2551,7 +2619,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 						xml_get_current_line_number($parser), xml_get_current_column_number($parser));
 				}
 				error_log($errstr);
-				$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['invalid_return'], $GLOBALS['xmlrpcstr']['invalid_return'].' ('.$errstr.')');
+				$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['invalid_return'], $GLOBALS['xmlrpcstr']['invalid_return'].' ('.$errstr.')');
 				xml_parser_free($parser);
 				if($this->debug)
 				{
@@ -2571,7 +2639,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 					/// @todo echo something for user?
 				}
 
-				$r =& new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['invalid_return'],
+				$r = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['invalid_return'],
 				$GLOBALS['xmlrpcstr']['invalid_return'] . ' ' . $GLOBALS['_xh']['isf_reason']);
 			}
 			// third error check: parsing of the response has somehow gone boink.
@@ -2581,7 +2649,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 				// something odd has happened
 				// and it's time to generate a client side error
 				// indicating something odd went on
-				$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['invalid_return'],
+				$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['invalid_return'],
 					$GLOBALS['xmlrpcstr']['invalid_return']);
 			}
 			else
@@ -2621,11 +2689,11 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 						$errno = -1;
 					}
 
-					$r =& new xmlrpcresp(0, $errno, $errstr);
+					$r = new xmlrpcresp(0, $errno, $errstr);
 				}
 				else
 				{
-					$r=&new xmlrpcresp($v, 0, '', $return_type);
+					$r=new xmlrpcresp($v, 0, '', $return_type);
 				}
 			}
 
@@ -2679,7 +2747,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 						$this->me['struct']=$val;
 						break;
 					default:
-						error_log("XML-RPC: xmlrpcval::xmlrpcval: not a known type ($type)");
+						error_log("XML-RPC: ".__METHOD__.": not a known type ($type)");
 				}
 				/*if($type=='')
 				{
@@ -2711,13 +2779,13 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 			$typeof=@$GLOBALS['xmlrpcTypes'][$type];
 			if($typeof!=1)
 			{
-				error_log("XML-RPC: xmlrpcval::addScalar: not a scalar type ($type)");
+				error_log("XML-RPC: ".__METHOD__.": not a scalar type ($type)");
 				return 0;
 			}
 
 			// coerce booleans into correct values
-			// NB: we should iether do it for datetimes, integers and doubles, too,
-			// or just plain remove this check, implemnted on booleans only...
+			// NB: we should either do it for datetimes, integers and doubles, too,
+			// or just plain remove this check, implemented on booleans only...
 			if($type==$GLOBALS['xmlrpcBoolean'])
 			{
 				if(strcasecmp($val,'true')==0 || $val==1 || ($val==true && strcasecmp($val,'false')))
@@ -2733,18 +2801,18 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 			switch($this->mytype)
 			{
 				case 1:
-					error_log('XML-RPC: xmlrpcval::addScalar: scalar xmlrpcval can have only one value');
+					error_log('XML-RPC: '.__METHOD__.': scalar xmlrpcval can have only one value');
 					return 0;
 				case 3:
-					error_log('XML-RPC: xmlrpcval::addScalar: cannot add anonymous scalar to struct xmlrpcval');
+					error_log('XML-RPC: '.__METHOD__.': cannot add anonymous scalar to struct xmlrpcval');
 					return 0;
 				case 2:
 					// we're adding a scalar value to an array here
 					//$ar=$this->me['array'];
-					//$ar[]=&new xmlrpcval($val, $type);
+					//$ar[]=new xmlrpcval($val, $type);
 					//$this->me['array']=$ar;
 					// Faster (?) avoid all the costly array-copy-by-val done here...
-					$this->me['array'][]=&new xmlrpcval($val, $type);
+					$this->me['array'][]=new xmlrpcval($val, $type);
 					return 1;
 				default:
 					// a scalar, so set the value and remember we're scalar
@@ -2778,7 +2846,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 			}
 			else
 			{
-				error_log('XML-RPC: xmlrpcval::addArray: already initialized as a [' . $this->kindOf() . ']');
+				error_log('XML-RPC: '.__METHOD__.': already initialized as a [' . $this->kindOf() . ']');
 				return 0;
 			}
 		}
@@ -2807,7 +2875,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 			}
 			else
 			{
-				error_log('XML-RPC: xmlrpcval::addStruct: already initialized as a [' . $this->kindOf() . ']');
+				error_log('XML-RPC: '.__METHOD__.': already initialized as a [' . $this->kindOf() . ']');
 				return 0;
 			}
 		}
@@ -2879,10 +2947,41 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 							$rs.="<${typ}>".(int)$val."</${typ}>";
 							break;
 						case $GLOBALS['xmlrpcDouble']:
-							$rs.="<${typ}>".(double)$val."</${typ}>";
+							// avoid using standard conversion of float to string because it is locale-dependent,
+							// and also because the xmlrpc spec forbids exponential notation.
+							// sprintf('%F') could be most likely ok but it fails eg. on 2e-14.
+							// The code below tries its best at keeping max precision while avoiding exp notation,
+							// but there is of course no limit in the number of decimal places to be used...
+							$rs.="<${typ}>".preg_replace('/\\.?0+$/','',number_format((double)$val, 128, '.', ''))."</${typ}>";
+							break;
+						case $GLOBALS['xmlrpcDateTime']:
+							if (is_string($val))
+							{
+								$rs.="<${typ}>${val}</${typ}>";
+							}
+							else if(is_a($val, 'DateTime'))
+							{
+								$rs.="<${typ}>".$val->format('Ymd\TH:i:s')."</${typ}>";
+							}
+							else if(is_int($val))
+							{
+								$rs.="<${typ}>".strftime("%Y%m%dT%H:%M:%S", $val)."</${typ}>";
+							}
+							else
+							{
+								// not really a good idea here: but what shall we output anyway? left for backward compat...
+								$rs.="<${typ}>${val}</${typ}>";
+							}
 							break;
 						case $GLOBALS['xmlrpcNull']:
-							$rs.="<nil/>";
+							if ($GLOBALS['xmlrpc_null_apache_encoding'])
+							{
+								$rs.="<ex:nil/>";
+							}
+							else
+							{
+								$rs.="<nil/>";
+							}
 							break;
 						default:
 							// no standard type value should arrive here, but provide a possibility
@@ -3182,7 +3281,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 	* @author Dan Libby (dan@libby.com)
 	*
 	* @param xmlrpcval $xmlrpc_val
-	* @param array $options if 'decode_php_objs' is set in the options array, xmlrpc structs can be decoded into php objects
+	* @param array $options if 'decode_php_objs' is set in the options array, xmlrpc structs can be decoded into php objects; if 'dates_as_objects' is set xmlrpc datetimes are decoded as php DateTime objects (standard is
 	* @return mixed
 	*/
 	function php_xmlrpc_decode($xmlrpc_val, $options=array())
@@ -3209,6 +3308,27 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 							return $xmlrpc_val->scalarval();
 					}
 				}
+				if (in_array('dates_as_objects', $options) && $xmlrpc_val->scalartyp() == 'dateTime.iso8601')
+				{
+					// we return a Datetime object instead of a string
+					// since now the constructor of xmlrpcval accepts safely strings, ints and datetimes,
+					// we cater to all 3 cases here
+					$out = $xmlrpc_val->scalarval();
+					if (is_string($out))
+					{
+						$out = strtotime($out);
+					}
+					if (is_int($out))
+					{
+						$result = new Datetime();
+						$result->setTimestamp($out);
+						return $result;
+					}
+					elseif (is_a($out, 'Datetime'))
+					{
+						return $out;
+					}
+				}
 				return $xmlrpc_val->scalarval();
 			case 'array':
 				$size = $xmlrpc_val->arraysize();
@@ -3283,27 +3403,27 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 	* @param array $options	can include 'encode_php_objs', 'auto_dates', 'null_extension' or 'extension_api'
 	* @return xmlrpcval
 	*/
-	function &php_xmlrpc_encode($php_val, $options=array())
+	function php_xmlrpc_encode($php_val, $options=array())
 	{
 		$type = gettype($php_val);
 		switch($type)
 		{
 			case 'string':
 				if (in_array('auto_dates', $options) && preg_match('/^[0-9]{8}T[0-9]{2}:[0-9]{2}:[0-9]{2}$/', $php_val))
-					$xmlrpc_val =& new xmlrpcval($php_val, $GLOBALS['xmlrpcDateTime']);
+					$xmlrpc_val = new xmlrpcval($php_val, $GLOBALS['xmlrpcDateTime']);
 				else
-					$xmlrpc_val =& new xmlrpcval($php_val, $GLOBALS['xmlrpcString']);
+					$xmlrpc_val = new xmlrpcval($php_val, $GLOBALS['xmlrpcString']);
 				break;
 			case 'integer':
-				$xmlrpc_val =& new xmlrpcval($php_val, $GLOBALS['xmlrpcInt']);
+				$xmlrpc_val = new xmlrpcval($php_val, $GLOBALS['xmlrpcInt']);
 				break;
 			case 'double':
-				$xmlrpc_val =& new xmlrpcval($php_val, $GLOBALS['xmlrpcDouble']);
+				$xmlrpc_val = new xmlrpcval($php_val, $GLOBALS['xmlrpcDouble']);
 				break;
 				// <G_Giunta_2001-02-29>
 				// Add support for encoding/decoding of booleans, since they are supported in PHP
 			case 'boolean':
-				$xmlrpc_val =& new xmlrpcval($php_val, $GLOBALS['xmlrpcBoolean']);
+				$xmlrpc_val = new xmlrpcval($php_val, $GLOBALS['xmlrpcBoolean']);
 				break;
 				// </G_Giunta_2001-02-29>
 			case 'array':
@@ -3317,7 +3437,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 				$ko = false;
 				foreach($php_val as $key => $val)
 				{
-					$arr[$key] =& php_xmlrpc_encode($val, $options);
+					$arr[$key] = php_xmlrpc_encode($val, $options);
 					if(!$ko && $key !== $j)
 					{
 						$ko = true;
@@ -3326,11 +3446,11 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 				}
 				if($ko)
 				{
-					$xmlrpc_val =& new xmlrpcval($arr, $GLOBALS['xmlrpcStruct']);
+					$xmlrpc_val = new xmlrpcval($arr, $GLOBALS['xmlrpcStruct']);
 				}
 				else
 				{
-					$xmlrpc_val =& new xmlrpcval($arr, $GLOBALS['xmlrpcArray']);
+					$xmlrpc_val = new xmlrpcval($arr, $GLOBALS['xmlrpcArray']);
 				}
 				break;
 			case 'object':
@@ -3338,14 +3458,19 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 				{
 					$xmlrpc_val = $php_val;
 				}
+				else if(is_a($php_val, 'DateTime'))
+				{
+					$xmlrpc_val = new xmlrpcval($php_val->format('Ymd\TH:i:s'), $GLOBALS['xmlrpcStruct']);
+				}
 				else
 				{
 					$arr = array();
+					reset($php_val);
 					while(list($k,$v) = each($php_val))
 					{
 						$arr[$k] = php_xmlrpc_encode($v, $options);
 					}
-					$xmlrpc_val =& new xmlrpcval($arr, $GLOBALS['xmlrpcStruct']);
+					$xmlrpc_val = new xmlrpcval($arr, $GLOBALS['xmlrpcStruct']);
 					if (in_array('encode_php_objs', $options))
 					{
 						// let's save original class name into xmlrpcval:
@@ -3357,32 +3482,32 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 			case 'NULL':
 				if (in_array('extension_api', $options))
 				{
-					$xmlrpc_val =& new xmlrpcval('', $GLOBALS['xmlrpcString']);
+					$xmlrpc_val = new xmlrpcval('', $GLOBALS['xmlrpcString']);
 				}
-				if (in_array('null_extension', $options))
+				else if (in_array('null_extension', $options))
 				{
-					$xmlrpc_val =& new xmlrpcval('', $GLOBALS['xmlrpcNull']);
+					$xmlrpc_val = new xmlrpcval('', $GLOBALS['xmlrpcNull']);
 				}
 				else
 				{
-					$xmlrpc_val =& new xmlrpcval();
+					$xmlrpc_val = new xmlrpcval();
 				}
 				break;
 			case 'resource':
 				if (in_array('extension_api', $options))
 				{
-					$xmlrpc_val =& new xmlrpcval((int)$php_val, $GLOBALS['xmlrpcInt']);
+					$xmlrpc_val = new xmlrpcval((int)$php_val, $GLOBALS['xmlrpcInt']);
 				}
 				else
 				{
-					$xmlrpc_val =& new xmlrpcval();
+					$xmlrpc_val = new xmlrpcval();
 				}
 			// catch "user function", "unknown type"
 			default:
 				// giancarlo pinerolo <ping@alt.it>
 				// it has to return
 				// an empty object in case, not a boolean.
-				$xmlrpc_val =& new xmlrpcval();
+				$xmlrpc_val = new xmlrpcval();
 				break;
 			}
 			return $xmlrpc_val;
@@ -3410,7 +3535,16 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 		/// @todo 'guestimate' encoding
 		$parser = xml_parser_create();
 		xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, true);
-		xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, $GLOBALS['xmlrpc_internalencoding']);
+		// What if internal encoding is not in one of the 3 allowed?
+		// we use the broadest one, ie. utf8!
+		if (!in_array($GLOBALS['xmlrpc_internalencoding'], array('UTF-8', 'ISO-8859-1', 'US-ASCII')))
+		{
+			xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, 'UTF-8');
+		}
+		else
+		{
+			xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, $GLOBALS['xmlrpc_internalencoding']);
+		}
 		xml_set_element_handler($parser, 'xmlrpc_se_any', 'xmlrpc_ee');
 		xml_set_character_data_handler($parser, 'xmlrpc_cd');
 		xml_set_default_handler($parser, 'xmlrpc_dh');
@@ -3437,15 +3571,15 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 				{
 					$vc = $v->structmem('faultCode');
 					$vs = $v->structmem('faultString');
-					$r =& new xmlrpcresp(0, $vc->scalarval(), $vs->scalarval());
+					$r = new xmlrpcresp(0, $vc->scalarval(), $vs->scalarval());
 				}
 				else
 				{
-					$r =& new xmlrpcresp($v);
+					$r = new xmlrpcresp($v);
 				}
 				return $r;
 			case 'methodcall':
-				$m =& new xmlrpcmsg($GLOBALS['_xh']['method']);
+				$m = new xmlrpcmsg($GLOBALS['_xh']['method']);
 				for($i=0; $i < count($GLOBALS['_xh']['params']); $i++)
 				{
 					$m->addParam($GLOBALS['_xh']['params'][$i]);
@@ -3515,9 +3649,8 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 
 	/**
 	* xml charset encoding guessing helper function.
-	* Tries to determine the charset encoding of an XML chunk
-	* received over HTTP.
-	* NB: according to the spec (RFC 3023, if text/xml content-type is received over HTTP without a content-type,
+	* Tries to determine the charset encoding of an XML chunk received over HTTP.
+	* NB: according to the spec (RFC 3023), if text/xml content-type is received over HTTP without a content-type,
 	* we SHOULD assume it is strictly US-ASCII. But we try to be more tolerant of unconforming (legacy?) clients/servers,
 	* which will be most probably using UTF-8 anyway...
 	*
@@ -3535,16 +3668,19 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 		//Details:
 		// LWS:           (\13\10)?( |\t)+
 		// token:         (any char but excluded stuff)+
+		// quoted string: " (any char but double quotes and cointrol chars)* "
 		// header:        Content-type = ...; charset=value(; ...)*
 		//   where value is of type token, no LWS allowed between 'charset' and value
 		// Note: we do not check for invalid chars in VALUE:
 		//   this had better be done using pure ereg as below
+		// Note 2: we might be removing whitespace/tabs that ought to be left in if
+		//   the received charset is a quoted string. But nobody uses such charset names...
 
 		/// @todo this test will pass if ANY header has charset specification, not only Content-Type. Fix it?
 		$matches = array();
-		if(preg_match('/;\s*charset=([^;]+)/i', $httpheader, $matches))
+		if(preg_match('/;\s*charset\s*=([^;]+)/i', $httpheader, $matches))
 		{
-			return strtoupper(trim($matches[1]));
+			return strtoupper(trim($matches[1], " \t\""));
 		}
 
 		// 2 - scan the first bytes of the data for a UTF-16 (or other) BOM pattern
@@ -3601,7 +3737,7 @@ xmlrpc_encode_entitites($this->errstr, $GLOBALS['xmlrpc_internalencoding'], $cha
 		else
 		{
 			// no encoding specified: as per HTTP1.1 assume it is iso-8859-1?
-			// Both RFC 2616 (HTTP 1.1) and 1945(http 1.0) clearly state that for text/xxx content types
+			// Both RFC 2616 (HTTP 1.1) and 1945 (HTTP 1.0) clearly state that for text/xxx content types
 			// this should be the standard. And we should be getting text/xml as request and response.
 			// BUT we have to be backward compatible with the lib, which always used UTF-8 as default...
 			return $GLOBALS['xmlrpc_defencoding'];
diff --git a/third_party/phpxmlrpc/lib/xmlrpc_wrappers.inc b/third_party/phpxmlrpc/lib/xmlrpc_wrappers.inc
index 6e2e951..1a663f0 100644
--- a/third_party/phpxmlrpc/lib/xmlrpc_wrappers.inc
+++ b/third_party/phpxmlrpc/lib/xmlrpc_wrappers.inc
@@ -3,12 +3,13 @@
  * PHP-XMLRPC "wrapper" functions
  * Generate stubs to transparently access xmlrpc methods as php functions and viceversa
  *
- * @version xmlrpc_wrappers.inc,v 1.10 2006/09/01 21:49:19 ggiunta
- * @copyright G. Giunta (C) 2006
+ * @version $Id: xmlrpc_wrappers.inc,v 1.13 2008/09/20 01:23:47 ggiunta Exp $
  * @author Gaetano Giunta
+ * @copyright (C) 2006-2009 G. Giunta
+ * @license code licensed under the BSD License: http://phpxmlrpc.sourceforge.net/license.txt
  *
  * @todo separate introspection from code generation for func-2-method wrapping
- * @todo use some better templating system from code generation?
+ * @todo use some better templating system for code generation?
  * @todo implement method wrapping with preservation of php objs in calls
  * @todo when wrapping methods without obj rebuilding, use return_type = 'phpvals' (faster)
  * @todo implement self-parsing of php code for PHP <= 4
@@ -21,6 +22,7 @@
 	* accepted come from javadoc blocks), return corresponding phpxmlrpc type.
 	* NB: for php 'resource' types returns empty string, since resources cannot be serialized;
 	* for php class names returns 'struct', since php objects can be serialized as xmlrpc structs
+	* for php arrays always return array, even though arrays sometiles serialize as json structs
 	* @param string $phptype
 	* @return string
 	*/
@@ -121,7 +123,7 @@
 	* php functions (ie. functions not expecting a single xmlrpcmsg obj as parameter)
 	* is by making use of the functions_parameters_type class member.
 	*
-	* @param string $funcname the name of the PHP user function to be exposed as xmlrpc method; array($obj, 'methodname') might be ok too, in the future...
+	* @param string $funcname the name of the PHP user function to be exposed as xmlrpc method; array($obj, 'methodname') and array('class', 'methodname') are ok too
 	* @param string $newfuncname (optional) name for function to be created
 	* @param array $extra_options (optional) array of options for conversion. valid values include:
 	*        bool  return_source when true, php code w. function definition will be returned, not evaluated
@@ -135,8 +137,10 @@
 	* @todo finish using javadoc info to build method sig if all params are named but out of order
 	* @todo add a check for params of 'resource' type
 	* @todo add some trigger_errors / error_log when returning false?
-	* @todo what to do when the PHP function returns NULL? we are currently an empty string value...
+	* @todo what to do when the PHP function returns NULL? we are currently returning an empty string value...
 	* @todo add an option to suppress php warnings in invocation of user function, similar to server debug level 3?
+	* @todo if $newfuncname is empty, we could use create_user_func instead of eval, as it is possibly faster
+	* @todo add a verbatim_object_copy parameter to allow avoiding the same obj instance?
 	*/
 	function wrap_php_function($funcname, $newfuncname='', $extra_options=array())
 	{
@@ -152,9 +156,43 @@
 			error_log('XML-RPC: cannot not wrap php functions unless running php version bigger than 5.0.3');
 			return false;
 		}
-		if((is_array($funcname) && !method_exists($funcname[0], $funcname[1])) || !function_exists($funcname))
+
+        $exists = false;
+	    if (is_string($funcname) && strpos($funcname, '::') !== false)
+	    {
+	        $funcname = explode('::', $funcname);
+	    }
+        if(is_array($funcname))
+        {
+            if(count($funcname) < 2 || (!is_string($funcname[0]) && !is_object($funcname[0])))
+            {
+    			error_log('XML-RPC: syntax for function to be wrapped is wrong');
+    			return false;
+            }
+            if(is_string($funcname[0]))
+            {
+                $plainfuncname = implode('::', $funcname);
+            }
+            elseif(is_object($funcname[0]))
+            {
+                $plainfuncname = get_class($funcname[0]) . '->' . $funcname[1];
+            }
+            $exists = method_exists($funcname[0], $funcname[1]);
+            if (!$exists && version_compare(phpversion(), '5.1') < 0)
+            {
+               // workaround for php 5.0: static class methods are not seen by method_exists
+               $exists = is_callable( $funcname );
+            }
+        }
+        else
+        {
+            $plainfuncname = $funcname;
+            $exists = function_exists($funcname);
+        }
+
+		if(!$exists)
 		{
-			error_log('XML-RPC: function to be wrapped is not defined: '.$funcname);
+			error_log('XML-RPC: function to be wrapped is not defined: '.$plainfuncname);
 			return false;
 		}
 		else
@@ -164,7 +202,10 @@
 			{
 				if(is_array($funcname))
 				{
-					$xmlrpcfuncname = "{$prefix}_".implode('_', $funcname);
+    				if(is_string($funcname[0]))
+        				$xmlrpcfuncname = "{$prefix}_".implode('_', $funcname);
+    				else
+    					$xmlrpcfuncname = "{$prefix}_".get_class($funcname[0]) . '_' . $funcname[1];
 				}
 				else
 				{
@@ -181,12 +222,46 @@
 			}
 
 			// start to introspect PHP code
-			$func =& new ReflectionFunction($funcname);
+			if(is_array($funcname))
+			{
+    			$func = new ReflectionMethod($funcname[0], $funcname[1]);
+    			if($func->isPrivate())
+    			{
+    				error_log('XML-RPC: method to be wrapped is private: '.$plainfuncname);
+    				return false;
+    			}
+    			if($func->isProtected())
+    			{
+    				error_log('XML-RPC: method to be wrapped is protected: '.$plainfuncname);
+    				return false;
+    			}
+     			if($func->isConstructor())
+    			{
+    				error_log('XML-RPC: method to be wrapped is the constructor: '.$plainfuncname);
+    				return false;
+    			}
+			    // php 503 always says isdestructor = true...
+                if( version_compare(phpversion(), '5.0.3') != 0 && $func->isDestructor())
+    			{
+    				error_log('XML-RPC: method to be wrapped is the destructor: '.$plainfuncname);
+    				return false;
+    			}
+    			if($func->isAbstract())
+    			{
+    				error_log('XML-RPC: method to be wrapped is abstract: '.$plainfuncname);
+    				return false;
+    			}
+                /// @todo add more checks for static vs. nonstatic?
+            }
+			else
+			{
+    			$func = new ReflectionFunction($funcname);
+            }
 			if($func->isInternal())
 			{
 				// Note: from PHP 5.1.0 onward, we will possibly be able to use invokeargs
 				// instead of getparameters to fully reflect internal php functions ?
-				error_log('XML-RPC: function to be wrapped is internal: '.$funcname);
+				error_log('XML-RPC: function to be wrapped is internal: '.$plainfuncname);
 				return false;
 			}
 
@@ -333,9 +408,21 @@
 			}
 
 			$innercode .= "\$np = false;\n";
+			// since there are no closures in php, if we are given an object instance,
+            // we store a pointer to it in a global var...
+			if ( is_array($funcname) && is_object($funcname[0]) )
+			{
+			    $GLOBALS['xmlrpcWPFObjHolder'][$xmlrpcfuncname] =& $funcname[0];
+			    $innercode .= "\$obj =& \$GLOBALS['xmlrpcWPFObjHolder']['$xmlrpcfuncname'];\n";
+			    $realfuncname = '$obj->'.$funcname[1];
+			}
+			else
+			{
+    			$realfuncname = $plainfuncname;
+            }
 			foreach($parsvariations as $pars)
 			{
-				$innercode .= "if (\$paramcount == " . count($pars) . ") \$retval = {$catch_warnings}$funcname(" . implode(',', $pars) . "); else\n";
+				$innercode .= "if (\$paramcount == " . count($pars) . ") \$retval = {$catch_warnings}$realfuncname(" . implode(',', $pars) . "); else\n";
 				// build a 'generic' signature (only use an appropriate return type)
 				$sig = array($returns);
 				$psig = array($returnsDocs);
@@ -383,7 +470,7 @@
 
 				if(!$allOK)
 				{
-					error_log('XML-RPC: could not create function '.$xmlrpcfuncname.' to wrap php function '.$funcname);
+					error_log('XML-RPC: could not create function '.$xmlrpcfuncname.' to wrap php function '.$plainfuncname);
 					return false;
 				}
 			}
@@ -396,6 +483,56 @@
 		}
 	}
 
+    /**
+    * Given a user-defined PHP class or php object, map its methods onto a list of
+	* PHP 'wrapper' functions that can be exposed as xmlrpc methods from an xmlrpc_server
+	* object and called from remote clients (as well as their corresponding signature info).
+	*
+    * @param mixed $classname the name of the class whose methods are to be exposed as xmlrpc methods, or an object instance of that class
+    * @param array $extra_options see the docs for wrap_php_method for more options
+    *        string method_type 'static', 'nonstatic', 'all' and 'auto' (default); the latter will switch between static and non-static depending on wheter $classname is a class name or object instance
+    * @return array or false on failure
+    *
+    * @todo get_class_methods will return both static and non-static methods.
+    *       we have to differentiate the action, depending on wheter we recived a class name or object
+    */
+    function wrap_php_class($classname, $extra_options=array())
+    {
+		$methodfilter = isset($extra_options['method_filter']) ? $extra_options['method_filter'] : '';
+		$methodtype = isset($extra_options['method_type']) ? $extra_options['method_type'] : 'auto';
+
+        if(version_compare(phpversion(), '5.0.3') == -1)
+		{
+			// up to php 5.0.3 some useful reflection methods were missing
+			error_log('XML-RPC: cannot not wrap php functions unless running php version bigger than 5.0.3');
+			return false;
+		}
+
+        $result = array();
+		$mlist = get_class_methods($classname);
+		foreach($mlist as $mname)
+		{
+    		if ($methodfilter == '' || preg_match($methodfilter, $mname))
+			{
+    			// echo $mlist."\n";
+    			$func = new ReflectionMethod($classname, $mname);
+    			if(!$func->isPrivate() && !$func->isProtected() && !$func->isConstructor() && !$func->isDestructor() && !$func->isAbstract())
+    			{
+        			if(($func->isStatic && ($methodtype == 'all' || $methodtype == 'static' || ($methodtype == 'auto' && is_string($classname)))) ||
+            			(!$func->isStatic && ($methodtype == 'all' || $methodtype == 'nonstatic' || ($methodtype == 'auto' && is_object($classname)))))
+            		{
+                        $methodwrap = wrap_php_function(array($classname, $mname), '', $extra_options);
+                        if ( $methodwrap )
+                        {
+                            $result[$methodwrap['function']] = $methodwrap['function'];
+                        }
+                    }
+    			}
+			}
+		}
+        return $result;
+    }
+
 	/**
 	* Given an xmlrpc client and a method name, register a php wrapper function
 	* that will call it and return results using native php types for both
@@ -436,7 +573,7 @@
 	function wrap_xmlrpc_method($client, $methodname, $extra_options=0, $timeout=0, $protocol='', $newfuncname='')
 	{
 		// mind numbing: let caller use sane calling convention (as per javadoc, 3 params),
-		// OR the 2.0 calling convention (no ptions) - we really love backward compat, don't we?
+		// OR the 2.0 calling convention (no options) - we really love backward compat, don't we?
 		if (!is_array($extra_options))
 		{
 			$signum = $extra_options;
@@ -474,7 +611,7 @@
 		$valclass = $prefix.'val';
 		$decodefunc = 'php_'.$prefix.'_decode';
 
-		$msg =& new $msgclass('system.methodSignature');
+		$msg = new $msgclass('system.methodSignature');
 		$msg->addparam(new $valclass($methodname));
 		$client->setDebug($debug);
 		$response =& $client->send($msg, $timeout, $protocol);
@@ -520,7 +657,7 @@
 				// in online mode, favour speed of operation
 				if(!$buildit)
 				{
-					$msg =& new $msgclass('system.methodHelp');
+					$msg = new $msgclass('system.methodHelp');
 					$msg->addparam(new $valclass($methodname));
 					$response =& $client->send($msg, $timeout, $protocol);
 					if (!$response->faultCode())
@@ -575,7 +712,7 @@
 	function wrap_xmlrpc_server($client, $extra_options=array())
 	{
 		$methodfilter = isset($extra_options['method_filter']) ? $extra_options['method_filter'] : '';
-		$signum = isset($extra_options['signum']) ? (int)$extra_options['signum'] : 0;
+		//$signum = isset($extra_options['signum']) ? (int)$extra_options['signum'] : 0;
 		$timeout = isset($extra_options['timeout']) ? (int)$extra_options['timeout'] : 0;
 		$protocol = isset($extra_options['protocol']) ? $extra_options['protocol'] : '';
 		$newclassname = isset($extra_options['new_class_name']) ? $extra_options['new_class_name'] : '';
@@ -589,7 +726,7 @@
 		//$valclass = $prefix.'val';
 		$decodefunc = 'php_'.$prefix.'_decode';
 
-		$msg =& new $msgclass('system.listMethods');
+		$msg = new $msgclass('system.listMethods');
 		$response =& $client->send($msg, $timeout, $protocol);
 		if($response->faultCode())
 		{
@@ -709,7 +846,7 @@
 			$innercode = '';
 			$this_ = 'this->';
 		}
-		$innercode .= "\$msg =& new {$prefix}msg('$methodname');\n";
+		$innercode .= "\$msg = new {$prefix}msg('$methodname');\n";
 
 		if ($mdesc != '')
 		{
@@ -732,7 +869,7 @@
 				$ptype == 'string' || $ptype == 'dateTime.iso8601' || $ptype == 'base64' || $ptype == 'null')
 			{
 				// only build directly xmlrpcvals when type is known and scalar
-				$innercode .= "\$p$i =& new {$prefix}val(\$p$i, '$ptype');\n";
+				$innercode .= "\$p$i = new {$prefix}val(\$p$i, '$ptype');\n";
 			}
 			else
 			{
@@ -794,7 +931,7 @@
 	*/
 	function build_client_wrapper_code($client, $verbatim_client_copy, $prefix='xmlrpc')
 	{
-		$code = "\$client =& new {$prefix}_client('".str_replace("'", "\'", $client->path).
+		$code = "\$client = new {$prefix}_client('".str_replace("'", "\'", $client->path).
 			"', '" . str_replace("'", "\'", $client->server) . "', $client->port);\n";
 
 		// copy all client fields to the client that will be generated runtime
diff --git a/third_party/phpxmlrpc/lib/xmlrpcs.inc b/third_party/phpxmlrpc/lib/xmlrpcs.inc
index 8a965c2..441dc3d 100644
--- a/third_party/phpxmlrpc/lib/xmlrpcs.inc
+++ b/third_party/phpxmlrpc/lib/xmlrpcs.inc
@@ -1,7 +1,7 @@
 <?php
 // by Edd Dumbill (C) 1999-2002
 // <edd@usefulinc.com>
-// xmlrpcs.inc,v 1.66 2006/09/17 21:25:06 ggiunta
+// $Id: xmlrpcs.inc,v 1.71 2008/10/29 23:41:28 ggiunta Exp $
 
 // Copyright (c) 1999,2000,2002 Edd Dumbill.
 // All rights reserved.
@@ -85,13 +85,13 @@
 		$outAr=array();
 		foreach($server->dmap as $key => $val)
 		{
-			$outAr[]=&new xmlrpcval($key, 'string');
+			$outAr[]=new xmlrpcval($key, 'string');
 		}
 		if($server->allow_system_funcs)
 		{
 			foreach($GLOBALS['_xmlrpcs_dmap'] as $key => $val)
 			{
-				$outAr[]=&new xmlrpcval($key, 'string');
+				$outAr[]=new xmlrpcval($key, 'string');
 			}
 		}
 		return new xmlrpcresp(new xmlrpcval($outAr, 'array'));
@@ -130,22 +130,22 @@
 					$cursig=array();
 					foreach($inSig as $sig)
 					{
-						$cursig[]=&new xmlrpcval($sig, 'string');
+						$cursig[]=new xmlrpcval($sig, 'string');
 					}
-					$sigs[]=&new xmlrpcval($cursig, 'array');
+					$sigs[]=new xmlrpcval($cursig, 'array');
 				}
-				$r=&new xmlrpcresp(new xmlrpcval($sigs, 'array'));
+				$r=new xmlrpcresp(new xmlrpcval($sigs, 'array'));
 			}
 			else
 			{
 				// NB: according to the official docs, we should be returning a
 				// "none-array" here, which means not-an-array
-				$r=&new xmlrpcresp(new xmlrpcval('undef', 'string'));
+				$r=new xmlrpcresp(new xmlrpcval('undef', 'string'));
 			}
 		}
 		else
 		{
-			$r=&new xmlrpcresp(0,$GLOBALS['xmlrpcerr']['introspect_unknown'], $GLOBALS['xmlrpcstr']['introspect_unknown']);
+			$r=new xmlrpcresp(0,$GLOBALS['xmlrpcerr']['introspect_unknown'], $GLOBALS['xmlrpcstr']['introspect_unknown']);
 		}
 		return $r;
 	}
@@ -177,16 +177,16 @@
 		{
 			if(isset($dmap[$methName]['docstring']))
 			{
-				$r=&new xmlrpcresp(new xmlrpcval($dmap[$methName]['docstring']), 'string');
+				$r=new xmlrpcresp(new xmlrpcval($dmap[$methName]['docstring']), 'string');
 			}
 			else
 			{
-				$r=&new xmlrpcresp(new xmlrpcval('', 'string'));
+				$r=new xmlrpcresp(new xmlrpcval('', 'string'));
 			}
 		}
 		else
 		{
-			$r=&new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['introspect_unknown'], $GLOBALS['xmlrpcstr']['introspect_unknown']);
+			$r=new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['introspect_unknown'], $GLOBALS['xmlrpcstr']['introspect_unknown']);
 		}
 		return $r;
 	}
@@ -207,8 +207,8 @@
 			$str = $err->faultString();
 		}
 		$struct = array();
-		$struct['faultCode'] =& new xmlrpcval($code, 'int');
-		$struct['faultString'] =& new xmlrpcval($str, 'string');
+		$struct['faultCode'] = new xmlrpcval($code, 'int');
+		$struct['faultString'] = new xmlrpcval($str, 'string');
 		return new xmlrpcval($struct, 'struct');
 	}
 
@@ -243,7 +243,7 @@
 		}
 		$numParams = $params->arraysize();
 
-		$msg =& new xmlrpcmsg($methName->scalarval());
+		$msg = new xmlrpcmsg($methName->scalarval());
 		for($i = 0; $i < $numParams; $i++)
 		{
 			if(!$msg->addParam($params->arraymem($i)))
@@ -365,6 +365,7 @@
 
 	$GLOBALS['_xmlrpcs_occurred_errors'] = '';
 	$GLOBALS['_xmlrpcs_prev_ehandler'] = '';
+
 	/**
 	* Error handler used to track errors that occur during server-side execution of PHP code.
 	* This allows to report back to the client whether an internal error has occurred or not
@@ -381,7 +382,7 @@
 			return;
 
 		//if($errcode != E_NOTICE && $errcode != E_WARNING && $errcode != E_USER_NOTICE && $errcode != E_USER_WARNING)
-		if($errcode != 2048) // do not use E_STRICT by name, since on PHP 4 it will not be defined
+		if($errcode != E_STRICT)
 		{
 			$GLOBALS['_xmlrpcs_occurred_errors'] = $GLOBALS['_xmlrpcs_occurred_errors'] . $errstring . "\n";
 		}
@@ -404,7 +405,8 @@
 				// NB: this code will NOT work on php < 4.0.2: only 2 params were used for error handlers
 				if(is_array($GLOBALS['_xmlrpcs_prev_ehandler']))
 				{
-					$GLOBALS['_xmlrpcs_prev_ehandler'][0]->$GLOBALS['_xmlrpcs_prev_ehandler'][1]($errcode, $errstring, $filename, $lineno, $context);
+					// the following works both with static class methods and plain object methods as error handler
+					call_user_func_array($GLOBALS['_xmlrpcs_prev_ehandler'], array($errcode, $errstring, $filename, $lineno, $context));
 				}
 				else
 				{
@@ -431,17 +433,34 @@
 
 	class xmlrpc_server
 	{
-		/// array defining php functions exposed as xmlrpc methods by this server
+		/**
+		* Array defining php functions exposed as xmlrpc methods by this server
+		* @access private
+		*/
 		var $dmap=array();
 		/**
-		* Defines how functions in dmap will be invokde: either using an xmlrpc msg object
+		* Defines how functions in dmap will be invoked: either using an xmlrpc msg object
 		* or plain php values.
 		* valid strings are 'xmlrpcvals', 'phpvals' or 'epivals'
 		*/
 		var $functions_parameters_type='xmlrpcvals';
+		/**
+		* Option used for fine-tuning the encoding the php values returned from
+		* functions registered in the dispatch map when the functions_parameters_types
+		* member is set to 'phpvals'
+		* @see php_xmlrpc_encode for a list of values
+		*/
+		var $phpvals_encoding_options = array( 'auto_dates' );
 		/// controls wether the server is going to echo debugging messages back to the client as comments in response body. valid values: 0,1,2,3
 		var $debug = 1;
 		/**
+		* Controls behaviour of server when invoked user function throws an exception:
+		* 0 = catch it and return an 'internal error' xmlrpc response (default)
+		* 1 = catch it and return an xmlrpc response with the error corresponding to the exception
+		* 2 = allow the exception to float to the upper layers
+		*/
+		var $exception_handling = 0;
+		/**
 		* When set to true, it will enable HTTP compression of the response, in case
 		* the client has declared its support for compression in the request.
 		*/
@@ -465,9 +484,14 @@
 		* NB: pretty dangerous if you accept every charset and do not have mbstring enabled)
 		*/
 		var $response_charset_encoding = '';
-		/// storage for internal debug info
+		/**
+		* Storage for internal debug info
+		* @access private
+		*/
 		var $debug_info = '';
-		/// extra data passed at runtime to method handling functions. Used only by EPI layer
+		/**
+		* Extra data passed at runtime to method handling functions. Used only by EPI layer
+		*/
 		var $user_data = null;
 
 		/**
@@ -563,7 +587,16 @@
 		{
 			if ($data === null)
 			{
-				$data = isset($GLOBALS['HTTP_RAW_POST_DATA']) ? $GLOBALS['HTTP_RAW_POST_DATA'] : '';
+				// workaround for a known bug in php ver. 5.2.2 that broke $HTTP_RAW_POST_DATA
+				$ver = phpversion();
+				if ($ver[0] >= 5)
+				{
+					$data = file_get_contents('php://input');
+				}
+				else
+				{
+					$data = isset($GLOBALS['HTTP_RAW_POST_DATA']) ? $GLOBALS['HTTP_RAW_POST_DATA'] : '';
+				}
 			}
 			$raw_data = $data;
 
@@ -622,7 +655,7 @@
 				// http compression of output: only
 				// if we can do it, and we want to do it, and client asked us to,
 				// and php ini settings do not force it already
-				$php_no_self_compress = ini_get('zlib.output_compression') == '' && (ini_get('output_handler') != 'ob_gzhandler');
+				$php_no_self_compress = !ini_get('zlib.output_compression') && (ini_get('output_handler') != 'ob_gzhandler');
 				if($this->compress_response && function_exists('gzencode') && $resp_encoding != ''
 					&& $php_no_self_compress)
 				{
@@ -649,7 +682,7 @@
 			}
 			else
 			{
-				error_log('XML-RPC: xmlrpc_server::service: http headers already sent before response is fully generated. Check for php warning or error messages');
+				error_log('XML-RPC: '.__METHOD__.': http headers already sent before response is fully generated. Check for php warning or error messages');
 			}
 
 			print $payload;
@@ -664,9 +697,10 @@
 		* @param string $function the php function that will get invoked
 		* @param array $sig the array of valid method signatures
 		* @param string $doc method documentation
+		* @param array $sigdoc the array of valid method signatures docs (one string per param, one for return type)
 		* @access public
 		*/
-		function add_to_map($methodname,$function,$sig=null,$doc='')
+		function add_to_map($methodname,$function,$sig=null,$doc=false,$sigdoc=false)
 		{
 			$this->dmap[$methodname] = array(
 				'function'	=> $function,
@@ -676,6 +710,10 @@
 			{
 				$this->dmap[$methodname]['signature'] = $sig;
 			}
+			if ($sigdoc)
+			{
+				$this->dmap[$methodname]['signature_docs'] = $sigdoc;
+			}
 		}
 
 		/**
@@ -716,7 +754,7 @@
 						}
 						else
 						{
-							$pt= $in[$n] == 'i4' ? 'int' : $in[$n]; // dispatch maps never use i4...
+							$pt= $in[$n] == 'i4' ? 'int' : strtolower($in[$n]); // dispatch maps never use i4...
 						}
 
 						// param index is $n+1, as first member of sig is return type
@@ -752,10 +790,11 @@
 		*/
 		function parseRequestHeaders(&$data, &$req_encoding, &$resp_encoding, &$resp_compression)
 		{
-			// Play nice to PHP 4.0.x: superglobals were not yet invented...
-			if(!isset($_SERVER))
+			// check if $_SERVER is populated: it might have been disabled via ini file
+			// (this is true even when in CLI mode)
+			if (count($_SERVER) == 0)
 			{
-				$_SERVER = $GLOBALS['HTTP_SERVER_VARS'];
+				error_log('XML-RPC: '.__METHOD__.': cannot parse request headers as $_SERVER is not populated');
 			}
 
 			if($this->debug > 1)
@@ -804,14 +843,14 @@
 						}
 						else
 						{
-							$r =& new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['server_decompress_fail'], $GLOBALS['xmlrpcstr']['server_decompress_fail']);
+							$r = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['server_decompress_fail'], $GLOBALS['xmlrpcstr']['server_decompress_fail']);
 							return $r;
 						}
 					}
 					else
 					{
 						//error_log('The server sent deflated data. Your php install must have the Zlib extension compiled in to support this.');
-						$r =& new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['server_cannot_decompress'], $GLOBALS['xmlrpcstr']['server_cannot_decompress']);
+						$r = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['server_cannot_decompress'], $GLOBALS['xmlrpcstr']['server_cannot_decompress']);
 						return $r;
 					}
 				}
@@ -829,7 +868,7 @@
 					/// @todo we should parse q=0.x preferences instead of getting first charset specified...
 					$client_accepted_charsets = explode(',', strtoupper($_SERVER['HTTP_ACCEPT_CHARSET']));
 					// Give preference to internal encoding
-					$known_charsets = array($this->internal_encoding, 'UTF-8', 'ISO-8859-1', 'US-ASCII');
+					$known_charsets = array($GLOBALS['xmlrpc_internalencoding'], 'UTF-8', 'ISO-8859-1', 'US-ASCII');
 					foreach ($known_charsets as $charset)
 					{
 						foreach ($client_accepted_charsets as $accepted)
@@ -904,11 +943,12 @@
 				// makes the lib about 200% slower...
 				//if (!is_valid_charset($req_encoding, array('UTF-8', 'ISO-8859-1', 'US-ASCII')))
 				{
-					error_log('XML-RPC: xmlrpc_server::parseRequest: invalid charset encoding of received request: '.$req_encoding);
+					error_log('XML-RPC: '.__METHOD__.': invalid charset encoding of received request: '.$req_encoding);
 					$req_encoding = $GLOBALS['xmlrpc_defencoding'];
 				}
 				/// @BUG this will fail on PHP 5 if charset is not specified in the xml prologue,
 				// the encoding is not UTF8 and there are non-ascii chars in the text...
+				/// @todo use an ampty string for php 5 ???
 				$parser = xml_parser_create($req_encoding);
 			}
 			else
@@ -919,7 +959,18 @@
 			xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, true);
 			// G. Giunta 2005/02/13: PHP internally uses ISO-8859-1, so we have to tell
 			// the xml parser to give us back data in the expected charset
-			xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, $GLOBALS['xmlrpc_internalencoding']);
+			// What if internal encoding is not in one of the 3 allowed?
+			// we use the broadest one, ie. utf8
+			// This allows to send data which is native in various charset,
+			// by extending xmlrpc_encode_entitites() and setting xmlrpc_internalencoding
+			if (!in_array($GLOBALS['xmlrpc_internalencoding'], array('UTF-8', 'ISO-8859-1', 'US-ASCII')))
+			{
+				xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, 'UTF-8');
+			}
+			else
+			{
+				xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, $GLOBALS['xmlrpc_internalencoding']);
+			}
 
 			if ($this->functions_parameters_type != 'xmlrpcvals')
 				xml_set_element_handler($parser, 'xmlrpc_se', 'xmlrpc_ee_fast');
@@ -930,7 +981,7 @@
 			if(!xml_parse($parser, $data, 1))
 			{
 				// return XML error as a faultCode
-				$r=&new xmlrpcresp(0,
+				$r=new xmlrpcresp(0,
 				$GLOBALS['xmlrpcerrxml']+xml_get_error_code($parser),
 				sprintf('XML error: %s at line %d, column %d',
 					xml_error_string(xml_get_error_code($parser)),
@@ -940,14 +991,18 @@
 			elseif ($GLOBALS['_xh']['isf'])
 			{
 				xml_parser_free($parser);
-				$r=&new xmlrpcresp(0,
+				$r=new xmlrpcresp(0,
 					$GLOBALS['xmlrpcerr']['invalid_request'],
 					$GLOBALS['xmlrpcstr']['invalid_request'] . ' ' . $GLOBALS['_xh']['isf_reason']);
 			}
 			else
 			{
 				xml_parser_free($parser);
-				if ($this->functions_parameters_type != 'xmlrpcvals')
+				// small layering violation in favor of speed and memory usage:
+				// we should allow the 'execute' method handle this, but in the
+				// most common scenario (xmlrpcvals type server with some methods
+				// registered as phpvals) that would mean a useless encode+decode pass
+				if ($this->functions_parameters_type != 'xmlrpcvals' || (isset($this->dmap[$GLOBALS['_xh']['method']]['parameters_type']) && ($this->dmap[$GLOBALS['_xh']['method']]['parameters_type'] == 'phpvals')))
 				{
 					if($this->debug > 1)
 					{
@@ -958,7 +1013,7 @@
 				else
 				{
 					// build an xmlrpcmsg object with data parsed from xml
-					$m=&new xmlrpcmsg($GLOBALS['_xh']['method']);
+					$m=new xmlrpcmsg($GLOBALS['_xh']['method']);
 					// now add parameters in
 					for($i=0; $i<count($GLOBALS['_xh']['params']); $i++)
 					{
@@ -969,7 +1024,6 @@
 					{
 						$this->debugmsg("\n+++PARSED+++\n".var_export($m, true)."\n+++END+++");
 					}
-
 					$r = $this->execute($m);
 				}
 			}
@@ -1037,7 +1091,7 @@
 			// verify that function to be invoked is in fact callable
 			if(!is_callable($func))
 			{
-				error_log("XML-RPC: xmlrpc_server::execute: function $func registered as method handler is not callable");
+				error_log("XML-RPC: ".__METHOD__.": function $func registered as method handler is not callable");
 				return new xmlrpcresp(
 					0,
 					$GLOBALS['xmlrpcerr']['server_error'],
@@ -1051,71 +1105,91 @@
 			{
 				$GLOBALS['_xmlrpcs_prev_ehandler'] = set_error_handler('_xmlrpcs_errorHandler');
 			}
-			if (is_object($m))
+			try
 			{
-				if($sysCall)
-				{
-					$r = call_user_func($func, $this, $m);
-				}
-				else
-				{
-					$r = call_user_func($func, $m);
-				}
-				if (!is_a($r, 'xmlrpcresp'))
+				// Allow mixed-convention servers
+				if (is_object($m))
 				{
-					error_log("XML-RPC: xmlrpc_server::execute: function $func registered as method handler does not return an xmlrpcresp object");
-					if (is_a($r, 'xmlrpcval'))
+					if($sysCall)
 					{
-						$r =& new xmlrpcresp($r);
+						$r = call_user_func($func, $this, $m);
 					}
 					else
 					{
-						$r =& new xmlrpcresp(
-							0,
-							$GLOBALS['xmlrpcerr']['server_error'],
-							$GLOBALS['xmlrpcstr']['server_error'] . ": function does not return xmlrpcresp object"
-						);
+						$r = call_user_func($func, $m);
+					}
+					if (!is_a($r, 'xmlrpcresp'))
+					{
+						error_log("XML-RPC: ".__METHOD__.": function $func registered as method handler does not return an xmlrpcresp object");
+						if (is_a($r, 'xmlrpcval'))
+						{
+							$r = new xmlrpcresp($r);
+						}
+						else
+						{
+							$r = new xmlrpcresp(
+								0,
+								$GLOBALS['xmlrpcerr']['server_error'],
+								$GLOBALS['xmlrpcstr']['server_error'] . ": function does not return xmlrpcresp object"
+							);
+						}
 					}
-				}
-			}
-			else
-			{
-				// call a 'plain php' function
-				if($sysCall)
-				{
-					array_unshift($params, $this);
-					$r = call_user_func_array($func, $params);
 				}
 				else
 				{
-					// 3rd API convention for method-handling functions: EPI-style
-					if ($this->functions_parameters_type == 'epivals')
+					// call a 'plain php' function
+					if($sysCall)
 					{
-						$r = call_user_func_array($func, array($methName, $params, $this->user_data));
-						// mimic EPI behaviour: if we get an array that looks like an error, make it
-						// an eror response
-						if (is_array($r) && array_key_exists('faultCode', $r) && array_key_exists('faultString', $r))
+						array_unshift($params, $this);
+						$r = call_user_func_array($func, $params);
+					}
+					else
+					{
+						// 3rd API convention for method-handling functions: EPI-style
+						if ($this->functions_parameters_type == 'epivals')
 						{
-							$r =& new xmlrpcresp(0, (integer)$r['faultCode'], (string)$r['faultString']);
+							$r = call_user_func_array($func, array($methName, $params, $this->user_data));
+							// mimic EPI behaviour: if we get an array that looks like an error, make it
+							// an eror response
+							if (is_array($r) && array_key_exists('faultCode', $r) && array_key_exists('faultString', $r))
+							{
+								$r = new xmlrpcresp(0, (integer)$r['faultCode'], (string)$r['faultString']);
+							}
+							else
+							{
+								// functions using EPI api should NOT return resp objects,
+								// so make sure we encode the return type correctly
+								$r = new xmlrpcresp(php_xmlrpc_encode($r, array('extension_api')));
+							}
 						}
 						else
 						{
-							// functions using EPI api should NOT return resp objects,
-							// so make sure we encode the return type correctly
-							$r =& new xmlrpcresp(php_xmlrpc_encode($r, array('extension_api')));
+							$r = call_user_func_array($func, $params);
 						}
 					}
-					else
+					// the return type can be either an xmlrpcresp object or a plain php value...
+					if (!is_a($r, 'xmlrpcresp'))
 					{
-						$r = call_user_func_array($func, $params);
+						// what should we assume here about automatic encoding of datetimes
+						// and php classes instances???
+						$r = new xmlrpcresp(php_xmlrpc_encode($r, $this->phpvals_encoding_options));
 					}
 				}
-				// the return type can be either an xmlrpcresp object or a plain php value...
-				if (!is_a($r, 'xmlrpcresp'))
+			}
+			catch(Exception $e)
+			{
+				// (barring errors in the lib) an uncatched exception happened
+				// in the called function, we wrap it in a proper error-response
+				switch($this->exception_handling)
 				{
-					// what should we assume here about automatic encoding of datetimes
-					// and php classes instances???
-					$r =& new xmlrpcresp(php_xmlrpc_encode($r, array('auto_dates')));
+					case 2:
+						throw $e;
+						break;
+					case 1:
+						$r = new xmlrpcresp(0, $e->getCode(), $e->getMessage());
+						break;
+					default:
+						$r = new xmlrpcresp(0, $GLOBALS['xmlrpcerr']['server_error'], $GLOBALS['xmlrpcstr']['server_error']);
 				}
 			}
 			if($this->debug > 2)
@@ -1165,7 +1239,7 @@
 		*/
 		function echoInput()
 		{
-			$r=&new xmlrpcresp(new xmlrpcval( "'Aha said I: '" . $GLOBALS['HTTP_RAW_POST_DATA'], 'string'));
+			$r=new xmlrpcresp(new xmlrpcval( "'Aha said I: '" . $GLOBALS['HTTP_RAW_POST_DATA'], 'string'));
 			print $r->serialize();
 		}
 	}
-- 
tg: (a63205e..) t/php5_thirdparty_xmlrpc (depends on: t/php5_deprecated t/htmlentities_on_utf8)
